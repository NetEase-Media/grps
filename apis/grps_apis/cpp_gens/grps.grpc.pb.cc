// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grps.proto

#include "grps.pb.h"
#include "grps.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grps {
namespace protos {
namespace v1 {

static const char* GrpsService_method_names[] = {
  "/grps.protos.v1.GrpsService/Predict",
  "/grps.protos.v1.GrpsService/PredictStreaming",
  "/grps.protos.v1.GrpsService/Online",
  "/grps.protos.v1.GrpsService/Offline",
  "/grps.protos.v1.GrpsService/CheckLiveness",
  "/grps.protos.v1.GrpsService/CheckReadiness",
  "/grps.protos.v1.GrpsService/ServerMetadata",
  "/grps.protos.v1.GrpsService/ModelMetadata",
};

std::unique_ptr< GrpsService::Stub> GrpsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GrpsService::Stub> stub(new GrpsService::Stub(channel));
  return stub;
}

GrpsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Predict_(GrpsService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PredictStreaming_(GrpsService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Online_(GrpsService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Offline_(GrpsService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckLiveness_(GrpsService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckReadiness_(GrpsService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerMetadata_(GrpsService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModelMetadata_(GrpsService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GrpsService::Stub::Predict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Predict_, context, request, response);
}

void GrpsService::Stub::experimental_async::Predict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Predict_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::Predict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Predict_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::Predict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Predict_, context, request, response, reactor);
}

void GrpsService::Stub::experimental_async::Predict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Predict_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::AsyncPredictRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_Predict_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::PrepareAsyncPredictRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_Predict_, context, request, false);
}

::grpc::ClientReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::PredictStreamingRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), rpcmethod_PredictStreaming_, context, request);
}

void GrpsService::Stub::experimental_async::PredictStreaming(::grpc::ClientContext* context, ::grps::protos::v1::GrpsMessage* request, ::grpc::experimental::ClientReadReactor< ::grps::protos::v1::GrpsMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_PredictStreaming_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::AsyncPredictStreamingRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_PredictStreaming_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::PrepareAsyncPredictStreamingRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_PredictStreaming_, context, request, false, nullptr);
}

::grpc::Status GrpsService::Stub::Online(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Online_, context, request, response);
}

void GrpsService::Stub::experimental_async::Online(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Online_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::Online(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Online_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::Online(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Online_, context, request, response, reactor);
}

void GrpsService::Stub::experimental_async::Online(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Online_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::AsyncOnlineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_Online_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::PrepareAsyncOnlineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_Online_, context, request, false);
}

::grpc::Status GrpsService::Stub::Offline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Offline_, context, request, response);
}

void GrpsService::Stub::experimental_async::Offline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Offline_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::Offline(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Offline_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::Offline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Offline_, context, request, response, reactor);
}

void GrpsService::Stub::experimental_async::Offline(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Offline_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::AsyncOfflineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_Offline_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::PrepareAsyncOfflineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_Offline_, context, request, false);
}

::grpc::Status GrpsService::Stub::CheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckLiveness_, context, request, response);
}

void GrpsService::Stub::experimental_async::CheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckLiveness_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::CheckLiveness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckLiveness_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::CheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckLiveness_, context, request, response, reactor);
}

void GrpsService::Stub::experimental_async::CheckLiveness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckLiveness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::AsyncCheckLivenessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_CheckLiveness_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::PrepareAsyncCheckLivenessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_CheckLiveness_, context, request, false);
}

::grpc::Status GrpsService::Stub::CheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckReadiness_, context, request, response);
}

void GrpsService::Stub::experimental_async::CheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckReadiness_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::CheckReadiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckReadiness_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::CheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckReadiness_, context, request, response, reactor);
}

void GrpsService::Stub::experimental_async::CheckReadiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckReadiness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::AsyncCheckReadinessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_CheckReadiness_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::PrepareAsyncCheckReadinessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_CheckReadiness_, context, request, false);
}

::grpc::Status GrpsService::Stub::ServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ServerMetadata_, context, request, response);
}

void GrpsService::Stub::experimental_async::ServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServerMetadata_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::ServerMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServerMetadata_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::ServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ServerMetadata_, context, request, response, reactor);
}

void GrpsService::Stub::experimental_async::ServerMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ServerMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::AsyncServerMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_ServerMetadata_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::PrepareAsyncServerMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_ServerMetadata_, context, request, false);
}

::grpc::Status GrpsService::Stub::ModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ModelMetadata_, context, request, response);
}

void GrpsService::Stub::experimental_async::ModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ModelMetadata_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::ModelMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ModelMetadata_, context, request, response, std::move(f));
}

void GrpsService::Stub::experimental_async::ModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ModelMetadata_, context, request, response, reactor);
}

void GrpsService::Stub::experimental_async::ModelMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ModelMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::AsyncModelMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_ModelMetadata_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* GrpsService::Stub::PrepareAsyncModelMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::grps::protos::v1::GrpsMessage>::Create(channel_.get(), cq, rpcmethod_ModelMetadata_, context, request, false);
}

GrpsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpsService::Service, ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          std::mem_fn(&GrpsService::Service::Predict), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpsService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GrpsService::Service, ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          std::mem_fn(&GrpsService::Service::PredictStreaming), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpsService::Service, ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          std::mem_fn(&GrpsService::Service::Online), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpsService::Service, ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          std::mem_fn(&GrpsService::Service::Offline), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpsService::Service, ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          std::mem_fn(&GrpsService::Service::CheckLiveness), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpsService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpsService::Service, ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          std::mem_fn(&GrpsService::Service::CheckReadiness), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpsService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpsService::Service, ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          std::mem_fn(&GrpsService::Service::ServerMetadata), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpsService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpsService::Service, ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          std::mem_fn(&GrpsService::Service::ModelMetadata), this)));
}

GrpsService::Service::~Service() {
}

::grpc::Status GrpsService::Service::Predict(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpsService::Service::PredictStreaming(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grpc::ServerWriter< ::grps::protos::v1::GrpsMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpsService::Service::Online(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpsService::Service::Offline(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpsService::Service::CheckLiveness(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpsService::Service::CheckReadiness(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpsService::Service::ServerMetadata(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpsService::Service::ModelMetadata(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grps
}  // namespace protos
}  // namespace v1

