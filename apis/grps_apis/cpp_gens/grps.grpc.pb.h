// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grps.proto
#ifndef GRPC_grps_2eproto__INCLUDED
#define GRPC_grps_2eproto__INCLUDED

#include "grps.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace grps {
namespace protos {
namespace v1 {

class GrpsService final {
 public:
  static constexpr char const* service_full_name() {
    return "grps.protos.v1.GrpsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Predict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> AsyncPredict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(AsyncPredictRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> PrepareAsyncPredict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncPredictRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::grps::protos::v1::GrpsMessage>> PredictStreaming(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::grps::protos::v1::GrpsMessage>>(PredictStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grps::protos::v1::GrpsMessage>> AsyncPredictStreaming(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grps::protos::v1::GrpsMessage>>(AsyncPredictStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grps::protos::v1::GrpsMessage>> PrepareAsyncPredictStreaming(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncPredictStreamingRaw(context, request, cq));
    }
    virtual ::grpc::Status Online(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> AsyncOnline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(AsyncOnlineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> PrepareAsyncOnline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncOnlineRaw(context, request, cq));
    }
    virtual ::grpc::Status Offline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> AsyncOffline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(AsyncOfflineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> PrepareAsyncOffline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncOfflineRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> AsyncCheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(AsyncCheckLivenessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> PrepareAsyncCheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncCheckLivenessRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> AsyncCheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(AsyncCheckReadinessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> PrepareAsyncCheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncCheckReadinessRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> AsyncServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(AsyncServerMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> PrepareAsyncServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncServerMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status ModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> AsyncModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(AsyncModelMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>> PrepareAsyncModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncModelMetadataRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Predict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Predict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Predict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Predict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void PredictStreaming(::grpc::ClientContext* context, ::grps::protos::v1::GrpsMessage* request, ::grpc::experimental::ClientReadReactor< ::grps::protos::v1::GrpsMessage>* reactor) = 0;
      virtual void Online(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Online(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Online(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Online(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Offline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Offline(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Offline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Offline(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckLiveness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckLiveness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckReadiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CheckReadiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ServerMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModelMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ModelMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* AsyncPredictRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* PrepareAsyncPredictRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::grps::protos::v1::GrpsMessage>* PredictStreamingRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::grps::protos::v1::GrpsMessage>* AsyncPredictStreamingRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::grps::protos::v1::GrpsMessage>* PrepareAsyncPredictStreamingRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* AsyncOnlineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* PrepareAsyncOnlineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* AsyncOfflineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* PrepareAsyncOfflineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* AsyncCheckLivenessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* PrepareAsyncCheckLivenessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* AsyncCheckReadinessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* PrepareAsyncCheckReadinessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* AsyncServerMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* PrepareAsyncServerMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* AsyncModelMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grps::protos::v1::GrpsMessage>* PrepareAsyncModelMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Predict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> AsyncPredict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(AsyncPredictRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> PrepareAsyncPredict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncPredictRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::grps::protos::v1::GrpsMessage>> PredictStreaming(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::grps::protos::v1::GrpsMessage>>(PredictStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::grps::protos::v1::GrpsMessage>> AsyncPredictStreaming(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::grps::protos::v1::GrpsMessage>>(AsyncPredictStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::grps::protos::v1::GrpsMessage>> PrepareAsyncPredictStreaming(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncPredictStreamingRaw(context, request, cq));
    }
    ::grpc::Status Online(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> AsyncOnline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(AsyncOnlineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> PrepareAsyncOnline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncOnlineRaw(context, request, cq));
    }
    ::grpc::Status Offline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> AsyncOffline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(AsyncOfflineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> PrepareAsyncOffline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncOfflineRaw(context, request, cq));
    }
    ::grpc::Status CheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> AsyncCheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(AsyncCheckLivenessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> PrepareAsyncCheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncCheckLivenessRaw(context, request, cq));
    }
    ::grpc::Status CheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> AsyncCheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(AsyncCheckReadinessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> PrepareAsyncCheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncCheckReadinessRaw(context, request, cq));
    }
    ::grpc::Status ServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> AsyncServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(AsyncServerMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> PrepareAsyncServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncServerMetadataRaw(context, request, cq));
    }
    ::grpc::Status ModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grps::protos::v1::GrpsMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> AsyncModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(AsyncModelMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>> PrepareAsyncModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>>(PrepareAsyncModelMetadataRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Predict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void Predict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void Predict(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Predict(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void PredictStreaming(::grpc::ClientContext* context, ::grps::protos::v1::GrpsMessage* request, ::grpc::experimental::ClientReadReactor< ::grps::protos::v1::GrpsMessage>* reactor) override;
      void Online(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void Online(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void Online(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Online(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Offline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void Offline(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void Offline(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Offline(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void CheckLiveness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void CheckLiveness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckLiveness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void CheckReadiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void CheckReadiness(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CheckReadiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void ServerMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void ServerMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ServerMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void ModelMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, std::function<void(::grpc::Status)>) override;
      void ModelMetadata(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ModelMetadata(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grps::protos::v1::GrpsMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* AsyncPredictRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* PrepareAsyncPredictRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::grps::protos::v1::GrpsMessage>* PredictStreamingRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request) override;
    ::grpc::ClientAsyncReader< ::grps::protos::v1::GrpsMessage>* AsyncPredictStreamingRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::grps::protos::v1::GrpsMessage>* PrepareAsyncPredictStreamingRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* AsyncOnlineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* PrepareAsyncOnlineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* AsyncOfflineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* PrepareAsyncOfflineRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* AsyncCheckLivenessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* PrepareAsyncCheckLivenessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* AsyncCheckReadinessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* PrepareAsyncCheckReadinessRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* AsyncServerMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* PrepareAsyncServerMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* AsyncModelMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grps::protos::v1::GrpsMessage>* PrepareAsyncModelMetadataRaw(::grpc::ClientContext* context, const ::grps::protos::v1::GrpsMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Predict_;
    const ::grpc::internal::RpcMethod rpcmethod_PredictStreaming_;
    const ::grpc::internal::RpcMethod rpcmethod_Online_;
    const ::grpc::internal::RpcMethod rpcmethod_Offline_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckLiveness_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckReadiness_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_ModelMetadata_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Predict(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response);
    virtual ::grpc::Status PredictStreaming(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grpc::ServerWriter< ::grps::protos::v1::GrpsMessage>* writer);
    virtual ::grpc::Status Online(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response);
    virtual ::grpc::Status Offline(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response);
    virtual ::grpc::Status CheckLiveness(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response);
    virtual ::grpc::Status CheckReadiness(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response);
    virtual ::grpc::Status ServerMetadata(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response);
    virtual ::grpc::Status ModelMetadata(::grpc::ServerContext* context, const ::grps::protos::v1::GrpsMessage* request, ::grps::protos::v1::GrpsMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Predict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Predict() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Predict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Predict(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredict(::grpc::ServerContext* context, ::grps::protos::v1::GrpsMessage* request, ::grpc::ServerAsyncResponseWriter< ::grps::protos::v1::GrpsMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PredictStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PredictStreaming() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PredictStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictStreaming(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grpc::ServerWriter< ::grps::protos::v1::GrpsMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictStreaming(::grpc::ServerContext* context, ::grps::protos::v1::GrpsMessage* request, ::grpc::ServerAsyncWriter< ::grps::protos::v1::GrpsMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Online : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Online() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Online() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Online(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnline(::grpc::ServerContext* context, ::grps::protos::v1::GrpsMessage* request, ::grpc::ServerAsyncResponseWriter< ::grps::protos::v1::GrpsMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Offline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Offline() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Offline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Offline(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOffline(::grpc::ServerContext* context, ::grps::protos::v1::GrpsMessage* request, ::grpc::ServerAsyncResponseWriter< ::grps::protos::v1::GrpsMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckLiveness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckLiveness() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CheckLiveness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLiveness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckLiveness(::grpc::ServerContext* context, ::grps::protos::v1::GrpsMessage* request, ::grpc::ServerAsyncResponseWriter< ::grps::protos::v1::GrpsMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckReadiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckReadiness() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CheckReadiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckReadiness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckReadiness(::grpc::ServerContext* context, ::grps::protos::v1::GrpsMessage* request, ::grpc::ServerAsyncResponseWriter< ::grps::protos::v1::GrpsMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerMetadata() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerMetadata(::grpc::ServerContext* context, ::grps::protos::v1::GrpsMessage* request, ::grpc::ServerAsyncResponseWriter< ::grps::protos::v1::GrpsMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModelMetadata() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelMetadata(::grpc::ServerContext* context, ::grps::protos::v1::GrpsMessage* request, ::grpc::ServerAsyncResponseWriter< ::grps::protos::v1::GrpsMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Predict<WithAsyncMethod_PredictStreaming<WithAsyncMethod_Online<WithAsyncMethod_Offline<WithAsyncMethod_CheckLiveness<WithAsyncMethod_CheckReadiness<WithAsyncMethod_ServerMetadata<WithAsyncMethod_ModelMetadata<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Predict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Predict() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          [this](::grpc::ServerContext* context,
                 const ::grps::protos::v1::GrpsMessage* request,
                 ::grps::protos::v1::GrpsMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Predict(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Predict(
        ::grpc::experimental::MessageAllocator< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Predict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Predict(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Predict(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PredictStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PredictStreaming() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          [this] { return this->PredictStreaming(); }));
    }
    ~ExperimentalWithCallbackMethod_PredictStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictStreaming(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grpc::ServerWriter< ::grps::protos::v1::GrpsMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>* PredictStreaming() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Online : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Online() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          [this](::grpc::ServerContext* context,
                 const ::grps::protos::v1::GrpsMessage* request,
                 ::grps::protos::v1::GrpsMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Online(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Online(
        ::grpc::experimental::MessageAllocator< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Online() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Online(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Online(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Offline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Offline() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          [this](::grpc::ServerContext* context,
                 const ::grps::protos::v1::GrpsMessage* request,
                 ::grps::protos::v1::GrpsMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Offline(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Offline(
        ::grpc::experimental::MessageAllocator< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Offline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Offline(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Offline(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckLiveness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CheckLiveness() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          [this](::grpc::ServerContext* context,
                 const ::grps::protos::v1::GrpsMessage* request,
                 ::grps::protos::v1::GrpsMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckLiveness(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckLiveness(
        ::grpc::experimental::MessageAllocator< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckLiveness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLiveness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckLiveness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckReadiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CheckReadiness() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          [this](::grpc::ServerContext* context,
                 const ::grps::protos::v1::GrpsMessage* request,
                 ::grps::protos::v1::GrpsMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CheckReadiness(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CheckReadiness(
        ::grpc::experimental::MessageAllocator< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckReadiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckReadiness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckReadiness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ServerMetadata() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          [this](::grpc::ServerContext* context,
                 const ::grps::protos::v1::GrpsMessage* request,
                 ::grps::protos::v1::GrpsMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ServerMetadata(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ServerMetadata(
        ::grpc::experimental::MessageAllocator< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ServerMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ModelMetadata() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(
          [this](::grpc::ServerContext* context,
                 const ::grps::protos::v1::GrpsMessage* request,
                 ::grps::protos::v1::GrpsMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ModelMetadata(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ModelMetadata(
        ::grpc::experimental::MessageAllocator< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ModelMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Predict<ExperimentalWithCallbackMethod_PredictStreaming<ExperimentalWithCallbackMethod_Online<ExperimentalWithCallbackMethod_Offline<ExperimentalWithCallbackMethod_CheckLiveness<ExperimentalWithCallbackMethod_CheckReadiness<ExperimentalWithCallbackMethod_ServerMetadata<ExperimentalWithCallbackMethod_ModelMetadata<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Predict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Predict() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Predict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Predict(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PredictStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PredictStreaming() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PredictStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictStreaming(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grpc::ServerWriter< ::grps::protos::v1::GrpsMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Online : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Online() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Online() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Online(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Offline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Offline() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Offline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Offline(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckLiveness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckLiveness() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CheckLiveness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLiveness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckReadiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckReadiness() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CheckReadiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckReadiness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerMetadata() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModelMetadata() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Predict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Predict() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Predict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Predict(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredict(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PredictStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PredictStreaming() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PredictStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictStreaming(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grpc::ServerWriter< ::grps::protos::v1::GrpsMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPredictStreaming(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Online : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Online() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Online() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Online(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Offline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Offline() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Offline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Offline(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOffline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckLiveness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckLiveness() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CheckLiveness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLiveness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckLiveness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckReadiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckReadiness() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CheckReadiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckReadiness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckReadiness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerMetadata() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModelMetadata() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModelMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Predict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Predict() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Predict(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Predict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Predict(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Predict(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PredictStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PredictStreaming() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->PredictStreaming(); }));
    }
    ~ExperimentalWithRawCallbackMethod_PredictStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PredictStreaming(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grpc::ServerWriter< ::grps::protos::v1::GrpsMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* PredictStreaming() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Online : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Online() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Online(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Online() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Online(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Online(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Offline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Offline() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Offline(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Offline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Offline(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Offline(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckLiveness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckLiveness() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckLiveness(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckLiveness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckLiveness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckLiveness(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckReadiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckReadiness() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CheckReadiness(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckReadiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckReadiness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CheckReadiness(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ServerMetadata() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ServerMetadata(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ServerMetadata(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ModelMetadata() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ModelMetadata(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ModelMetadata(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Predict : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Predict() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(std::bind(&WithStreamedUnaryMethod_Predict<BaseClass>::StreamedPredict, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Predict() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Predict(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPredict(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grps::protos::v1::GrpsMessage,::grps::protos::v1::GrpsMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Online : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Online() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(std::bind(&WithStreamedUnaryMethod_Online<BaseClass>::StreamedOnline, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Online() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Online(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grps::protos::v1::GrpsMessage,::grps::protos::v1::GrpsMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Offline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Offline() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(std::bind(&WithStreamedUnaryMethod_Offline<BaseClass>::StreamedOffline, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Offline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Offline(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOffline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grps::protos::v1::GrpsMessage,::grps::protos::v1::GrpsMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckLiveness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckLiveness() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(std::bind(&WithStreamedUnaryMethod_CheckLiveness<BaseClass>::StreamedCheckLiveness, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckLiveness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckLiveness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckLiveness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grps::protos::v1::GrpsMessage,::grps::protos::v1::GrpsMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckReadiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckReadiness() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(std::bind(&WithStreamedUnaryMethod_CheckReadiness<BaseClass>::StreamedCheckReadiness, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckReadiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckReadiness(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckReadiness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grps::protos::v1::GrpsMessage,::grps::protos::v1::GrpsMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerMetadata() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(std::bind(&WithStreamedUnaryMethod_ServerMetadata<BaseClass>::StreamedServerMetadata, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ServerMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grps::protos::v1::GrpsMessage,::grps::protos::v1::GrpsMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModelMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModelMetadata() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(std::bind(&WithStreamedUnaryMethod_ModelMetadata<BaseClass>::StreamedModelMetadata, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ModelMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModelMetadata(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grps::protos::v1::GrpsMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModelMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grps::protos::v1::GrpsMessage,::grps::protos::v1::GrpsMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Predict<WithStreamedUnaryMethod_Online<WithStreamedUnaryMethod_Offline<WithStreamedUnaryMethod_CheckLiveness<WithStreamedUnaryMethod_CheckReadiness<WithStreamedUnaryMethod_ServerMetadata<WithStreamedUnaryMethod_ModelMetadata<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_PredictStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_PredictStreaming() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::grps::protos::v1::GrpsMessage, ::grps::protos::v1::GrpsMessage>(std::bind(&WithSplitStreamingMethod_PredictStreaming<BaseClass>::StreamedPredictStreaming, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_PredictStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PredictStreaming(::grpc::ServerContext* /*context*/, const ::grps::protos::v1::GrpsMessage* /*request*/, ::grpc::ServerWriter< ::grps::protos::v1::GrpsMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedPredictStreaming(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::grps::protos::v1::GrpsMessage,::grps::protos::v1::GrpsMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_PredictStreaming<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Predict<WithSplitStreamingMethod_PredictStreaming<WithStreamedUnaryMethod_Online<WithStreamedUnaryMethod_Offline<WithStreamedUnaryMethod_CheckLiveness<WithStreamedUnaryMethod_CheckReadiness<WithStreamedUnaryMethod_ServerMetadata<WithStreamedUnaryMethod_ModelMetadata<Service > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace protos
}  // namespace grps


#endif  // GRPC_grps_2eproto__INCLUDED
