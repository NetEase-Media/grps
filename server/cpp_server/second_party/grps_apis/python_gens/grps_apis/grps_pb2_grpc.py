# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grps_pb2 as grps__pb2


class GrpsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Predict = channel.unary_unary(
                '/grps.protos.v1.GrpsService/Predict',
                request_serializer=grps__pb2.GrpsMessage.SerializeToString,
                response_deserializer=grps__pb2.GrpsMessage.FromString,
                )
        self.PredictStreaming = channel.unary_stream(
                '/grps.protos.v1.GrpsService/PredictStreaming',
                request_serializer=grps__pb2.GrpsMessage.SerializeToString,
                response_deserializer=grps__pb2.GrpsMessage.FromString,
                )
        self.Online = channel.unary_unary(
                '/grps.protos.v1.GrpsService/Online',
                request_serializer=grps__pb2.GrpsMessage.SerializeToString,
                response_deserializer=grps__pb2.GrpsMessage.FromString,
                )
        self.Offline = channel.unary_unary(
                '/grps.protos.v1.GrpsService/Offline',
                request_serializer=grps__pb2.GrpsMessage.SerializeToString,
                response_deserializer=grps__pb2.GrpsMessage.FromString,
                )
        self.CheckLiveness = channel.unary_unary(
                '/grps.protos.v1.GrpsService/CheckLiveness',
                request_serializer=grps__pb2.GrpsMessage.SerializeToString,
                response_deserializer=grps__pb2.GrpsMessage.FromString,
                )
        self.CheckReadiness = channel.unary_unary(
                '/grps.protos.v1.GrpsService/CheckReadiness',
                request_serializer=grps__pb2.GrpsMessage.SerializeToString,
                response_deserializer=grps__pb2.GrpsMessage.FromString,
                )
        self.ServerMetadata = channel.unary_unary(
                '/grps.protos.v1.GrpsService/ServerMetadata',
                request_serializer=grps__pb2.GrpsMessage.SerializeToString,
                response_deserializer=grps__pb2.GrpsMessage.FromString,
                )
        self.ModelMetadata = channel.unary_unary(
                '/grps.protos.v1.GrpsService/ModelMetadata',
                request_serializer=grps__pb2.GrpsMessage.SerializeToString,
                response_deserializer=grps__pb2.GrpsMessage.FromString,
                )


class GrpsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictStreaming(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Online(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Offline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckLiveness(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckReadiness(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GrpsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=grps__pb2.GrpsMessage.FromString,
                    response_serializer=grps__pb2.GrpsMessage.SerializeToString,
            ),
            'PredictStreaming': grpc.unary_stream_rpc_method_handler(
                    servicer.PredictStreaming,
                    request_deserializer=grps__pb2.GrpsMessage.FromString,
                    response_serializer=grps__pb2.GrpsMessage.SerializeToString,
            ),
            'Online': grpc.unary_unary_rpc_method_handler(
                    servicer.Online,
                    request_deserializer=grps__pb2.GrpsMessage.FromString,
                    response_serializer=grps__pb2.GrpsMessage.SerializeToString,
            ),
            'Offline': grpc.unary_unary_rpc_method_handler(
                    servicer.Offline,
                    request_deserializer=grps__pb2.GrpsMessage.FromString,
                    response_serializer=grps__pb2.GrpsMessage.SerializeToString,
            ),
            'CheckLiveness': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckLiveness,
                    request_deserializer=grps__pb2.GrpsMessage.FromString,
                    response_serializer=grps__pb2.GrpsMessage.SerializeToString,
            ),
            'CheckReadiness': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckReadiness,
                    request_deserializer=grps__pb2.GrpsMessage.FromString,
                    response_serializer=grps__pb2.GrpsMessage.SerializeToString,
            ),
            'ServerMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerMetadata,
                    request_deserializer=grps__pb2.GrpsMessage.FromString,
                    response_serializer=grps__pb2.GrpsMessage.SerializeToString,
            ),
            'ModelMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ModelMetadata,
                    request_deserializer=grps__pb2.GrpsMessage.FromString,
                    response_serializer=grps__pb2.GrpsMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grps.protos.v1.GrpsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GrpsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grps.protos.v1.GrpsService/Predict',
            grps__pb2.GrpsMessage.SerializeToString,
            grps__pb2.GrpsMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PredictStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grps.protos.v1.GrpsService/PredictStreaming',
            grps__pb2.GrpsMessage.SerializeToString,
            grps__pb2.GrpsMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Online(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grps.protos.v1.GrpsService/Online',
            grps__pb2.GrpsMessage.SerializeToString,
            grps__pb2.GrpsMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Offline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grps.protos.v1.GrpsService/Offline',
            grps__pb2.GrpsMessage.SerializeToString,
            grps__pb2.GrpsMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckLiveness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grps.protos.v1.GrpsService/CheckLiveness',
            grps__pb2.GrpsMessage.SerializeToString,
            grps__pb2.GrpsMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckReadiness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grps.protos.v1.GrpsService/CheckReadiness',
            grps__pb2.GrpsMessage.SerializeToString,
            grps__pb2.GrpsMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grps.protos.v1.GrpsService/ServerMetadata',
            grps__pb2.GrpsMessage.SerializeToString,
            grps__pb2.GrpsMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModelMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grps.protos.v1.GrpsService/ModelMetadata',
            grps__pb2.GrpsMessage.SerializeToString,
            grps__pb2.GrpsMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
