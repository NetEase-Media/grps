// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grps.brpc.proto

#include "grps.brpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace grps {
namespace protos {
namespace v1 {
}  // namespace v1
}  // namespace protos
}  // namespace grps
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_grps_2ebrpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grps_2ebrpc_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_grps_2ebrpc_2eproto[3];
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grps_2ebrpc_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_grps_2ebrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017grps.brpc.proto\022\016grps.protos.v1\032\ngrps."
  "proto2\362\004\n\017GrpsBrpcService\022E\n\007Predict\022\033.g"
  "rps.protos.v1.GrpsMessage\032\033.grps.protos."
  "v1.GrpsMessage\"\000\022U\n\rPredictByHttp\022 .grps"
  ".protos.v1.EmptyGrpsMessage\032 .grps.proto"
  "s.v1.EmptyGrpsMessage\"\000\022D\n\006Online\022\033.grps"
  ".protos.v1.GrpsMessage\032\033.grps.protos.v1."
  "GrpsMessage\"\000\022E\n\007Offline\022\033.grps.protos.v"
  "1.GrpsMessage\032\033.grps.protos.v1.GrpsMessa"
  "ge\"\000\022K\n\rCheckLiveness\022\033.grps.protos.v1.G"
  "rpsMessage\032\033.grps.protos.v1.GrpsMessage\""
  "\000\022L\n\016CheckReadiness\022\033.grps.protos.v1.Grp"
  "sMessage\032\033.grps.protos.v1.GrpsMessage\"\000\022"
  "L\n\016ServerMetadata\022\033.grps.protos.v1.GrpsM"
  "essage\032\033.grps.protos.v1.GrpsMessage\"\000\022K\n"
  "\rModelMetadata\022\033.grps.protos.v1.GrpsMess"
  "age\032\033.grps.protos.v1.GrpsMessage\"\0002\265\001\n\016M"
  "onitorService\022O\n\007Metrics\022 .grps.protos.v"
  "1.EmptyGrpsMessage\032 .grps.protos.v1.Empt"
  "yGrpsMessage\"\000\022R\n\nSeriesData\022 .grps.prot"
  "os.v1.EmptyGrpsMessage\032 .grps.protos.v1."
  "EmptyGrpsMessage\"\0002\264\001\n\tJsService\022S\n\013Jque"
  "ryMinJs\022 .grps.protos.v1.EmptyGrpsMessag"
  "e\032 .grps.protos.v1.EmptyGrpsMessage\"\000\022R\n"
  "\nFloatMinJs\022 .grps.protos.v1.EmptyGrpsMe"
  "ssage\032 .grps.protos.v1.EmptyGrpsMessage\""
  "\000B\006\200\001\001\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grps_2ebrpc_2eproto_deps[1] = {
  &::descriptor_table_grps_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_grps_2ebrpc_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grps_2ebrpc_2eproto_once;
static bool descriptor_table_grps_2ebrpc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grps_2ebrpc_2eproto = {
  &descriptor_table_grps_2ebrpc_2eproto_initialized, descriptor_table_protodef_grps_2ebrpc_2eproto, "grps.brpc.proto", 1057,
  &descriptor_table_grps_2ebrpc_2eproto_once, descriptor_table_grps_2ebrpc_2eproto_sccs, descriptor_table_grps_2ebrpc_2eproto_deps, 0, 1,
  schemas, file_default_instances, TableStruct_grps_2ebrpc_2eproto::offsets,
  file_level_metadata_grps_2ebrpc_2eproto, 0, file_level_enum_descriptors_grps_2ebrpc_2eproto, file_level_service_descriptors_grps_2ebrpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_grps_2ebrpc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_grps_2ebrpc_2eproto), true);
namespace grps {
namespace protos {
namespace v1 {

// ===================================================================

GrpsBrpcService::~GrpsBrpcService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GrpsBrpcService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grps_2ebrpc_2eproto);
  return file_level_service_descriptors_grps_2ebrpc_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GrpsBrpcService::GetDescriptor() {
  return descriptor();
}

void GrpsBrpcService::Predict(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::GrpsMessage*,
                         ::grps::protos::v1::GrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Predict() not implemented.");
  done->Run();
}

void GrpsBrpcService::PredictByHttp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::EmptyGrpsMessage*,
                         ::grps::protos::v1::EmptyGrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PredictByHttp() not implemented.");
  done->Run();
}

void GrpsBrpcService::Online(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::GrpsMessage*,
                         ::grps::protos::v1::GrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Online() not implemented.");
  done->Run();
}

void GrpsBrpcService::Offline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::GrpsMessage*,
                         ::grps::protos::v1::GrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Offline() not implemented.");
  done->Run();
}

void GrpsBrpcService::CheckLiveness(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::GrpsMessage*,
                         ::grps::protos::v1::GrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CheckLiveness() not implemented.");
  done->Run();
}

void GrpsBrpcService::CheckReadiness(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::GrpsMessage*,
                         ::grps::protos::v1::GrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CheckReadiness() not implemented.");
  done->Run();
}

void GrpsBrpcService::ServerMetadata(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::GrpsMessage*,
                         ::grps::protos::v1::GrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ServerMetadata() not implemented.");
  done->Run();
}

void GrpsBrpcService::ModelMetadata(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::GrpsMessage*,
                         ::grps::protos::v1::GrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ModelMetadata() not implemented.");
  done->Run();
}

void GrpsBrpcService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_grps_2ebrpc_2eproto[0]);
  switch(method->index()) {
    case 0:
      Predict(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::GrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::GrpsMessage*>(
                 response),
             done);
      break;
    case 1:
      PredictByHttp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::EmptyGrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::EmptyGrpsMessage*>(
                 response),
             done);
      break;
    case 2:
      Online(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::GrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::GrpsMessage*>(
                 response),
             done);
      break;
    case 3:
      Offline(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::GrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::GrpsMessage*>(
                 response),
             done);
      break;
    case 4:
      CheckLiveness(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::GrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::GrpsMessage*>(
                 response),
             done);
      break;
    case 5:
      CheckReadiness(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::GrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::GrpsMessage*>(
                 response),
             done);
      break;
    case 6:
      ServerMetadata(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::GrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::GrpsMessage*>(
                 response),
             done);
      break;
    case 7:
      ModelMetadata(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::GrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::GrpsMessage*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GrpsBrpcService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 1:
      return ::grps::protos::v1::EmptyGrpsMessage::default_instance();
    case 2:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 3:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 4:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 5:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 6:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 7:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GrpsBrpcService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 1:
      return ::grps::protos::v1::EmptyGrpsMessage::default_instance();
    case 2:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 3:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 4:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 5:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 6:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    case 7:
      return ::grps::protos::v1::GrpsMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GrpsBrpcService_Stub::GrpsBrpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GrpsBrpcService_Stub::GrpsBrpcService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GrpsBrpcService_Stub::~GrpsBrpcService_Stub() {
  if (owns_channel_) delete channel_;
}

void GrpsBrpcService_Stub::Predict(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::GrpsMessage* request,
                              ::grps::protos::v1::GrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GrpsBrpcService_Stub::PredictByHttp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::EmptyGrpsMessage* request,
                              ::grps::protos::v1::EmptyGrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GrpsBrpcService_Stub::Online(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::GrpsMessage* request,
                              ::grps::protos::v1::GrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GrpsBrpcService_Stub::Offline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::GrpsMessage* request,
                              ::grps::protos::v1::GrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void GrpsBrpcService_Stub::CheckLiveness(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::GrpsMessage* request,
                              ::grps::protos::v1::GrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void GrpsBrpcService_Stub::CheckReadiness(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::GrpsMessage* request,
                              ::grps::protos::v1::GrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void GrpsBrpcService_Stub::ServerMetadata(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::GrpsMessage* request,
                              ::grps::protos::v1::GrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void GrpsBrpcService_Stub::ModelMetadata(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::GrpsMessage* request,
                              ::grps::protos::v1::GrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
// ===================================================================

MonitorService::~MonitorService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MonitorService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grps_2ebrpc_2eproto);
  return file_level_service_descriptors_grps_2ebrpc_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MonitorService::GetDescriptor() {
  return descriptor();
}

void MonitorService::Metrics(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::EmptyGrpsMessage*,
                         ::grps::protos::v1::EmptyGrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Metrics() not implemented.");
  done->Run();
}

void MonitorService::SeriesData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::EmptyGrpsMessage*,
                         ::grps::protos::v1::EmptyGrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SeriesData() not implemented.");
  done->Run();
}

void MonitorService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_grps_2ebrpc_2eproto[1]);
  switch(method->index()) {
    case 0:
      Metrics(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::EmptyGrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::EmptyGrpsMessage*>(
                 response),
             done);
      break;
    case 1:
      SeriesData(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::EmptyGrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::EmptyGrpsMessage*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MonitorService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::grps::protos::v1::EmptyGrpsMessage::default_instance();
    case 1:
      return ::grps::protos::v1::EmptyGrpsMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MonitorService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::grps::protos::v1::EmptyGrpsMessage::default_instance();
    case 1:
      return ::grps::protos::v1::EmptyGrpsMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MonitorService_Stub::MonitorService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MonitorService_Stub::MonitorService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
MonitorService_Stub::~MonitorService_Stub() {
  if (owns_channel_) delete channel_;
}

void MonitorService_Stub::Metrics(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::EmptyGrpsMessage* request,
                              ::grps::protos::v1::EmptyGrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MonitorService_Stub::SeriesData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::EmptyGrpsMessage* request,
                              ::grps::protos::v1::EmptyGrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

JsService::~JsService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* JsService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grps_2ebrpc_2eproto);
  return file_level_service_descriptors_grps_2ebrpc_2eproto[2];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* JsService::GetDescriptor() {
  return descriptor();
}

void JsService::JqueryMinJs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::EmptyGrpsMessage*,
                         ::grps::protos::v1::EmptyGrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method JqueryMinJs() not implemented.");
  done->Run();
}

void JsService::FloatMinJs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grps::protos::v1::EmptyGrpsMessage*,
                         ::grps::protos::v1::EmptyGrpsMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method FloatMinJs() not implemented.");
  done->Run();
}

void JsService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_grps_2ebrpc_2eproto[2]);
  switch(method->index()) {
    case 0:
      JqueryMinJs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::EmptyGrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::EmptyGrpsMessage*>(
                 response),
             done);
      break;
    case 1:
      FloatMinJs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grps::protos::v1::EmptyGrpsMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grps::protos::v1::EmptyGrpsMessage*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& JsService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::grps::protos::v1::EmptyGrpsMessage::default_instance();
    case 1:
      return ::grps::protos::v1::EmptyGrpsMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& JsService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::grps::protos::v1::EmptyGrpsMessage::default_instance();
    case 1:
      return ::grps::protos::v1::EmptyGrpsMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

JsService_Stub::JsService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
JsService_Stub::JsService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
JsService_Stub::~JsService_Stub() {
  if (owns_channel_) delete channel_;
}

void JsService_Stub::JqueryMinJs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::EmptyGrpsMessage* request,
                              ::grps::protos::v1::EmptyGrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void JsService_Stub::FloatMinJs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grps::protos::v1::EmptyGrpsMessage* request,
                              ::grps::protos::v1::EmptyGrpsMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protos
}  // namespace grps
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
