// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grps.proto

#include "grps.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_grps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_GenericMapData_grps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SBEntry_DoNotUse_grps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SDEntry_DoNotUse_grps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SFEntry_DoNotUse_grps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SI32Entry_DoNotUse_grps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SI64Entry_DoNotUse_grps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SSEntry_DoNotUse_grps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericTensor_grps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenericTensorData_grps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArrayData_grps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_grps_2eproto;
namespace grps {
namespace protos {
namespace v1 {
class GenericTensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericTensor> _instance;
} _GenericTensor_default_instance_;
class GenericTensorDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericTensorData> _instance;
} _GenericTensorData_default_instance_;
class NDArrayDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NDArrayData> _instance;
} _NDArrayData_default_instance_;
class GenericMapData_SSEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericMapData_SSEntry_DoNotUse> _instance;
} _GenericMapData_SSEntry_DoNotUse_default_instance_;
class GenericMapData_SBEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericMapData_SBEntry_DoNotUse> _instance;
} _GenericMapData_SBEntry_DoNotUse_default_instance_;
class GenericMapData_SI32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericMapData_SI32Entry_DoNotUse> _instance;
} _GenericMapData_SI32Entry_DoNotUse_default_instance_;
class GenericMapData_SI64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericMapData_SI64Entry_DoNotUse> _instance;
} _GenericMapData_SI64Entry_DoNotUse_default_instance_;
class GenericMapData_SFEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericMapData_SFEntry_DoNotUse> _instance;
} _GenericMapData_SFEntry_DoNotUse_default_instance_;
class GenericMapData_SDEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericMapData_SDEntry_DoNotUse> _instance;
} _GenericMapData_SDEntry_DoNotUse_default_instance_;
class GenericMapDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericMapData> _instance;
} _GenericMapData_default_instance_;
class GrpsMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrpsMessage> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bin_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_data_;
  const ::grps::protos::v1::GenericTensorData* gtensors_;
  const ::grps::protos::v1::NDArrayData* ndarray_;
  const ::grps::protos::v1::GenericMapData* gmap_;
} _GrpsMessage_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class EmptyGrpsMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmptyGrpsMessage> _instance;
} _EmptyGrpsMessage_default_instance_;
}  // namespace v1
}  // namespace protos
}  // namespace grps
static void InitDefaultsscc_info_EmptyGrpsMessage_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_EmptyGrpsMessage_default_instance_;
    new (ptr) ::grps::protos::v1::EmptyGrpsMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grps::protos::v1::EmptyGrpsMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyGrpsMessage_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EmptyGrpsMessage_grps_2eproto}, {}};

static void InitDefaultsscc_info_GenericMapData_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_GenericMapData_default_instance_;
    new (ptr) ::grps::protos::v1::GenericMapData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grps::protos::v1::GenericMapData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_GenericMapData_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_GenericMapData_grps_2eproto}, {
      &scc_info_GenericMapData_SSEntry_DoNotUse_grps_2eproto.base,
      &scc_info_GenericMapData_SBEntry_DoNotUse_grps_2eproto.base,
      &scc_info_GenericMapData_SI32Entry_DoNotUse_grps_2eproto.base,
      &scc_info_GenericMapData_SI64Entry_DoNotUse_grps_2eproto.base,
      &scc_info_GenericMapData_SFEntry_DoNotUse_grps_2eproto.base,
      &scc_info_GenericMapData_SDEntry_DoNotUse_grps_2eproto.base,}};

static void InitDefaultsscc_info_GenericMapData_SBEntry_DoNotUse_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_GenericMapData_SBEntry_DoNotUse_default_instance_;
    new (ptr) ::grps::protos::v1::GenericMapData_SBEntry_DoNotUse();
  }
  ::grps::protos::v1::GenericMapData_SBEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SBEntry_DoNotUse_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericMapData_SBEntry_DoNotUse_grps_2eproto}, {}};

static void InitDefaultsscc_info_GenericMapData_SDEntry_DoNotUse_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_GenericMapData_SDEntry_DoNotUse_default_instance_;
    new (ptr) ::grps::protos::v1::GenericMapData_SDEntry_DoNotUse();
  }
  ::grps::protos::v1::GenericMapData_SDEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SDEntry_DoNotUse_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericMapData_SDEntry_DoNotUse_grps_2eproto}, {}};

static void InitDefaultsscc_info_GenericMapData_SFEntry_DoNotUse_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_GenericMapData_SFEntry_DoNotUse_default_instance_;
    new (ptr) ::grps::protos::v1::GenericMapData_SFEntry_DoNotUse();
  }
  ::grps::protos::v1::GenericMapData_SFEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SFEntry_DoNotUse_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericMapData_SFEntry_DoNotUse_grps_2eproto}, {}};

static void InitDefaultsscc_info_GenericMapData_SI32Entry_DoNotUse_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_GenericMapData_SI32Entry_DoNotUse_default_instance_;
    new (ptr) ::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse();
  }
  ::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SI32Entry_DoNotUse_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericMapData_SI32Entry_DoNotUse_grps_2eproto}, {}};

static void InitDefaultsscc_info_GenericMapData_SI64Entry_DoNotUse_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_GenericMapData_SI64Entry_DoNotUse_default_instance_;
    new (ptr) ::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse();
  }
  ::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SI64Entry_DoNotUse_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericMapData_SI64Entry_DoNotUse_grps_2eproto}, {}};

static void InitDefaultsscc_info_GenericMapData_SSEntry_DoNotUse_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_GenericMapData_SSEntry_DoNotUse_default_instance_;
    new (ptr) ::grps::protos::v1::GenericMapData_SSEntry_DoNotUse();
  }
  ::grps::protos::v1::GenericMapData_SSEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericMapData_SSEntry_DoNotUse_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericMapData_SSEntry_DoNotUse_grps_2eproto}, {}};

static void InitDefaultsscc_info_GenericTensor_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_GenericTensor_default_instance_;
    new (ptr) ::grps::protos::v1::GenericTensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grps::protos::v1::GenericTensor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericTensor_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericTensor_grps_2eproto}, {}};

static void InitDefaultsscc_info_GenericTensorData_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_GenericTensorData_default_instance_;
    new (ptr) ::grps::protos::v1::GenericTensorData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grps::protos::v1::GenericTensorData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenericTensorData_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GenericTensorData_grps_2eproto}, {
      &scc_info_GenericTensor_grps_2eproto.base,}};

static void InitDefaultsscc_info_GrpsMessage_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_GrpsMessage_default_instance_;
    new (ptr) ::grps::protos::v1::GrpsMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grps::protos::v1::GrpsMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GrpsMessage_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_GrpsMessage_grps_2eproto}, {
      &scc_info_Status_grps_2eproto.base,
      &scc_info_GenericTensorData_grps_2eproto.base,
      &scc_info_NDArrayData_grps_2eproto.base,
      &scc_info_GenericMapData_grps_2eproto.base,}};

static void InitDefaultsscc_info_NDArrayData_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_NDArrayData_default_instance_;
    new (ptr) ::grps::protos::v1::NDArrayData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grps::protos::v1::NDArrayData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArrayData_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NDArrayData_grps_2eproto}, {}};

static void InitDefaultsscc_info_Status_grps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grps::protos::v1::_Status_default_instance_;
    new (ptr) ::grps::protos::v1::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grps::protos::v1::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_grps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Status_grps_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grps_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_grps_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grps_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grps_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, name_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, dtype_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, shape_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, flat_uint8_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, flat_int8_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, flat_int16_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, flat_int32_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, flat_int64_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, flat_float16_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, flat_float32_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, flat_float64_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensor, flat_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericTensorData, tensors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::NDArrayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SSEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SSEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SSEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SSEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SBEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SBEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SBEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SBEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SFEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SFEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SFEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SFEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SDEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SDEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SDEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData_SDEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData, s_s_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData, s_b_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData, s_i32_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData, s_i64_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData, s_f_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GenericMapData, s_d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GrpsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GrpsMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GrpsMessage, status_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GrpsMessage, model_),
  offsetof(::grps::protos::v1::GrpsMessageDefaultTypeInternal, bin_data_),
  offsetof(::grps::protos::v1::GrpsMessageDefaultTypeInternal, str_data_),
  offsetof(::grps::protos::v1::GrpsMessageDefaultTypeInternal, gtensors_),
  offsetof(::grps::protos::v1::GrpsMessageDefaultTypeInternal, ndarray_),
  offsetof(::grps::protos::v1::GrpsMessageDefaultTypeInternal, gmap_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::GrpsMessage, data_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::Status, code_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::Status, msg_),
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::Status, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grps::protos::v1::EmptyGrpsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grps::protos::v1::GenericTensor)},
  { 17, -1, sizeof(::grps::protos::v1::GenericTensorData)},
  { 23, -1, sizeof(::grps::protos::v1::NDArrayData)},
  { 28, 35, sizeof(::grps::protos::v1::GenericMapData_SSEntry_DoNotUse)},
  { 37, 44, sizeof(::grps::protos::v1::GenericMapData_SBEntry_DoNotUse)},
  { 46, 53, sizeof(::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse)},
  { 55, 62, sizeof(::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse)},
  { 64, 71, sizeof(::grps::protos::v1::GenericMapData_SFEntry_DoNotUse)},
  { 73, 80, sizeof(::grps::protos::v1::GenericMapData_SDEntry_DoNotUse)},
  { 82, -1, sizeof(::grps::protos::v1::GenericMapData)},
  { 93, -1, sizeof(::grps::protos::v1::GrpsMessage)},
  { 106, -1, sizeof(::grps::protos::v1::Status)},
  { 114, -1, sizeof(::grps::protos::v1::EmptyGrpsMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_GenericTensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_GenericTensorData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_NDArrayData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_GenericMapData_SSEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_GenericMapData_SBEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_GenericMapData_SI32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_GenericMapData_SI64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_GenericMapData_SFEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_GenericMapData_SDEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_GenericMapData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_GrpsMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grps::protos::v1::_EmptyGrpsMessage_default_instance_),
};

const char descriptor_table_protodef_grps_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngrps.proto\022\016grps.protos.v1\"\263\002\n\rGeneric"
  "Tensor\022\014\n\004name\030\001 \001(\t\022\'\n\005dtype\030\002 \001(\0162\030.gr"
  "ps.protos.v1.DataType\022\021\n\005shape\030\003 \003(\rB\002\020\001"
  "\022\026\n\nflat_uint8\030\004 \003(\rB\002\020\001\022\025\n\tflat_int8\030\005 "
  "\003(\005B\002\020\001\022\026\n\nflat_int16\030\006 \003(\005B\002\020\001\022\026\n\nflat_"
  "int32\030\007 \003(\005B\002\020\001\022\026\n\nflat_int64\030\010 \003(\003B\002\020\001\022"
  "\030\n\014flat_float16\030\t \003(\002B\002\020\001\022\030\n\014flat_float3"
  "2\030\n \003(\002B\002\020\001\022\030\n\014flat_float64\030\013 \003(\001B\002\020\001\022\023\n"
  "\013flat_string\030\014 \003(\t\"C\n\021GenericTensorData\022"
  ".\n\007tensors\030\001 \003(\0132\035.grps.protos.v1.Generi"
  "cTensor\"\r\n\013NDArrayData\"\334\004\n\016GenericMapDat"
  "a\0223\n\003s_s\030\001 \003(\0132&.grps.protos.v1.GenericM"
  "apData.SSEntry\0223\n\003s_b\030\002 \003(\0132&.grps.proto"
  "s.v1.GenericMapData.SBEntry\0227\n\005s_i32\030\003 \003"
  "(\0132(.grps.protos.v1.GenericMapData.SI32E"
  "ntry\0227\n\005s_i64\030\004 \003(\0132(.grps.protos.v1.Gen"
  "ericMapData.SI64Entry\0223\n\003s_f\030\005 \003(\0132&.grp"
  "s.protos.v1.GenericMapData.SFEntry\0223\n\003s_"
  "d\030\006 \003(\0132&.grps.protos.v1.GenericMapData."
  "SDEntry\032)\n\007SSEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\032)\n\007SBEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\014:\0028\001\032+\n\tSI32Entry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\005:\0028\001\032+\n\tSI64Entry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032)\n\007SFEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\032)\n\007SDEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\221\002\n\013GrpsMe"
  "ssage\022&\n\006status\030\001 \001(\0132\026.grps.protos.v1.S"
  "tatus\022\r\n\005model\030\002 \001(\t\022\022\n\010bin_data\030\003 \001(\014H\000"
  "\022\022\n\010str_data\030\004 \001(\tH\000\0225\n\010gtensors\030\005 \001(\0132!"
  ".grps.protos.v1.GenericTensorDataH\000\022.\n\007n"
  "darray\030\006 \001(\0132\033.grps.protos.v1.NDArrayDat"
  "aH\000\022.\n\004gmap\030\007 \001(\0132\036.grps.protos.v1.Gener"
  "icMapDataH\000B\014\n\ndata_oneof\"\213\001\n\006Status\022\014\n\004"
  "code\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\0221\n\006status\030\003 \001(\0162"
  "!.grps.protos.v1.Status.StatusFlag\"3\n\nSt"
  "atusFlag\022\013\n\007UNKNOWN\020\000\022\013\n\007SUCCESS\020\001\022\013\n\007FA"
  "ILURE\020\002\"\022\n\020EmptyGrpsMessage*\236\001\n\010DataType"
  "\022\016\n\nDT_INVALID\020\000\022\014\n\010DT_UINT8\020\001\022\013\n\007DT_INT"
  "8\020\002\022\014\n\010DT_INT16\020\003\022\014\n\010DT_INT32\020\004\022\014\n\010DT_IN"
  "T64\020\005\022\016\n\nDT_FLOAT16\020\006\022\016\n\nDT_FLOAT32\020\007\022\016\n"
  "\nDT_FLOAT64\020\010\022\r\n\tDT_STRING\020\t2\351\004\n\013GrpsSer"
  "vice\022E\n\007Predict\022\033.grps.protos.v1.GrpsMes"
  "sage\032\033.grps.protos.v1.GrpsMessage\"\000\022P\n\020P"
  "redictStreaming\022\033.grps.protos.v1.GrpsMes"
  "sage\032\033.grps.protos.v1.GrpsMessage\"\0000\001\022D\n"
  "\006Online\022\033.grps.protos.v1.GrpsMessage\032\033.g"
  "rps.protos.v1.GrpsMessage\"\000\022E\n\007Offline\022\033"
  ".grps.protos.v1.GrpsMessage\032\033.grps.proto"
  "s.v1.GrpsMessage\"\000\022K\n\rCheckLiveness\022\033.gr"
  "ps.protos.v1.GrpsMessage\032\033.grps.protos.v"
  "1.GrpsMessage\"\000\022L\n\016CheckReadiness\022\033.grps"
  ".protos.v1.GrpsMessage\032\033.grps.protos.v1."
  "GrpsMessage\"\000\022L\n\016ServerMetadata\022\033.grps.p"
  "rotos.v1.GrpsMessage\032\033.grps.protos.v1.Gr"
  "psMessage\"\000\022K\n\rModelMetadata\022\033.grps.prot"
  "os.v1.GrpsMessage\032\033.grps.protos.v1.GrpsM"
  "essage\"\000B\"\n\016io.grps.protosB\nGrpsProtos\200\001"
  "\000\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grps_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_grps_2eproto_sccs[13] = {
  &scc_info_EmptyGrpsMessage_grps_2eproto.base,
  &scc_info_GenericMapData_grps_2eproto.base,
  &scc_info_GenericMapData_SBEntry_DoNotUse_grps_2eproto.base,
  &scc_info_GenericMapData_SDEntry_DoNotUse_grps_2eproto.base,
  &scc_info_GenericMapData_SFEntry_DoNotUse_grps_2eproto.base,
  &scc_info_GenericMapData_SI32Entry_DoNotUse_grps_2eproto.base,
  &scc_info_GenericMapData_SI64Entry_DoNotUse_grps_2eproto.base,
  &scc_info_GenericMapData_SSEntry_DoNotUse_grps_2eproto.base,
  &scc_info_GenericTensor_grps_2eproto.base,
  &scc_info_GenericTensorData_grps_2eproto.base,
  &scc_info_GrpsMessage_grps_2eproto.base,
  &scc_info_NDArrayData_grps_2eproto.base,
  &scc_info_Status_grps_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grps_2eproto_once;
static bool descriptor_table_grps_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grps_2eproto = {
  &descriptor_table_grps_2eproto_initialized, descriptor_table_protodef_grps_2eproto, "grps.proto", 2292,
  &descriptor_table_grps_2eproto_once, descriptor_table_grps_2eproto_sccs, descriptor_table_grps_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_grps_2eproto::offsets,
  file_level_metadata_grps_2eproto, 13, file_level_enum_descriptors_grps_2eproto, file_level_service_descriptors_grps_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_grps_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_grps_2eproto), true);
namespace grps {
namespace protos {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_StatusFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grps_2eproto);
  return file_level_enum_descriptors_grps_2eproto[0];
}
bool Status_StatusFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Status_StatusFlag Status::UNKNOWN;
constexpr Status_StatusFlag Status::SUCCESS;
constexpr Status_StatusFlag Status::FAILURE;
constexpr Status_StatusFlag Status::StatusFlag_MIN;
constexpr Status_StatusFlag Status::StatusFlag_MAX;
constexpr int Status::StatusFlag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grps_2eproto);
  return file_level_enum_descriptors_grps_2eproto[1];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GenericTensor::InitAsDefaultInstance() {
}
class GenericTensor::_Internal {
 public:
};

GenericTensor::GenericTensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grps.protos.v1.GenericTensor)
}
GenericTensor::GenericTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  shape_(arena),
  flat_uint8_(arena),
  flat_int8_(arena),
  flat_int16_(arena),
  flat_int32_(arena),
  flat_int64_(arena),
  flat_float16_(arena),
  flat_float32_(arena),
  flat_float64_(arena),
  flat_string_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grps.protos.v1.GenericTensor)
}
GenericTensor::GenericTensor(const GenericTensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shape_(from.shape_),
      flat_uint8_(from.flat_uint8_),
      flat_int8_(from.flat_int8_),
      flat_int16_(from.flat_int16_),
      flat_int32_(from.flat_int32_),
      flat_int64_(from.flat_int64_),
      flat_float16_(from.flat_float16_),
      flat_float32_(from.flat_float32_),
      flat_float64_(from.flat_float64_),
      flat_string_(from.flat_string_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:grps.protos.v1.GenericTensor)
}

void GenericTensor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericTensor_grps_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
}

GenericTensor::~GenericTensor() {
  // @@protoc_insertion_point(destructor:grps.protos.v1.GenericTensor)
  SharedDtor();
}

void GenericTensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericTensor::ArenaDtor(void* object) {
  GenericTensor* _this = reinterpret_cast< GenericTensor* >(object);
  (void)_this;
}
void GenericTensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericTensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericTensor& GenericTensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericTensor_grps_2eproto.base);
  return *internal_default_instance();
}


void GenericTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:grps.protos.v1.GenericTensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  flat_uint8_.Clear();
  flat_int8_.Clear();
  flat_int16_.Clear();
  flat_int32_.Clear();
  flat_int64_.Clear();
  flat_float16_.Clear();
  flat_float32_.Clear();
  flat_float64_.Clear();
  flat_string_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dtype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericTensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "grps.protos.v1.GenericTensor.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grps.protos.v1.DataType dtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dtype(static_cast<::grps::protos::v1::DataType>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 shape = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 flat_uint8 = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_flat_uint8(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_flat_uint8(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 flat_int8 = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_flat_int8(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          add_flat_int8(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 flat_int16 = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_flat_int16(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          add_flat_int16(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 flat_int32 = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_flat_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          add_flat_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 flat_int64 = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_flat_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          add_flat_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float flat_float16 = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_flat_float16(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          add_flat_float16(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float flat_float32 = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_flat_float32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          add_flat_float32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double flat_float64 = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_flat_float64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89) {
          add_flat_float64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string flat_string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_flat_string(), ptr, ctx, "grps.protos.v1.GenericTensor.flat_string");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericTensor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:grps.protos.v1.GenericTensor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.GenericTensor.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grps.protos.v1.DataType dtype = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::grps::protos::v1::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 shape = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shape())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 flat_uint8 = 4 [packed = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_flat_uint8())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_flat_uint8())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 flat_int8 = 5 [packed = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_flat_int8())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_flat_int8())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 flat_int16 = 6 [packed = true];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_flat_int16())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_flat_int16())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 flat_int32 = 7 [packed = true];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_flat_int32())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_flat_int32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 flat_int64 = 8 [packed = true];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_flat_int64())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 66u, input, this->mutable_flat_int64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float flat_float16 = 9 [packed = true];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_flat_float16())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_flat_float16())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float flat_float32 = 10 [packed = true];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_flat_float32())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_flat_float32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double flat_float64 = 11 [packed = true];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_flat_float64())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 90u, input, this->mutable_flat_float64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string flat_string = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_flat_string()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->flat_string(this->flat_string_size() - 1).data(),
            static_cast<int>(this->flat_string(this->flat_string_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.GenericTensor.flat_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grps.protos.v1.GenericTensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grps.protos.v1.GenericTensor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericTensor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grps.protos.v1.GenericTensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grps.protos.v1.GenericTensor.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .grps.protos.v1.DataType dtype = 2;
  if (this->dtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->dtype(), output);
  }

  // repeated uint32 shape = 3 [packed = true];
  if (this->shape_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->shape(i), output);
  }

  // repeated uint32 flat_uint8 = 4 [packed = true];
  if (this->flat_uint8_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_flat_uint8_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->flat_uint8_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->flat_uint8(i), output);
  }

  // repeated int32 flat_int8 = 5 [packed = true];
  if (this->flat_int8_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_flat_int8_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->flat_int8_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->flat_int8(i), output);
  }

  // repeated int32 flat_int16 = 6 [packed = true];
  if (this->flat_int16_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_flat_int16_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->flat_int16_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->flat_int16(i), output);
  }

  // repeated int32 flat_int32 = 7 [packed = true];
  if (this->flat_int32_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_flat_int32_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->flat_int32_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->flat_int32(i), output);
  }

  // repeated int64 flat_int64 = 8 [packed = true];
  if (this->flat_int64_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(8, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_flat_int64_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->flat_int64_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->flat_int64(i), output);
  }

  // repeated float flat_float16 = 9 [packed = true];
  if (this->flat_float16_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(9, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_flat_float16_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->flat_float16().data(), this->flat_float16_size(), output);
  }

  // repeated float flat_float32 = 10 [packed = true];
  if (this->flat_float32_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(10, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_flat_float32_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->flat_float32().data(), this->flat_float32_size(), output);
  }

  // repeated double flat_float64 = 11 [packed = true];
  if (this->flat_float64_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_flat_float64_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->flat_float64().data(), this->flat_float64_size(), output);
  }

  // repeated string flat_string = 12;
  for (int i = 0, n = this->flat_string_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->flat_string(i).data(), static_cast<int>(this->flat_string(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grps.protos.v1.GenericTensor.flat_string");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      12, this->flat_string(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grps.protos.v1.GenericTensor)
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericTensor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grps.protos.v1.GenericTensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grps.protos.v1.GenericTensor.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .grps.protos.v1.DataType dtype = 2;
  if (this->dtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->dtype(), target);
  }

  // repeated uint32 shape = 3 [packed = true];
  if (this->shape_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _shape_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->shape_, target);
  }

  // repeated uint32 flat_uint8 = 4 [packed = true];
  if (this->flat_uint8_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _flat_uint8_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->flat_uint8_, target);
  }

  // repeated int32 flat_int8 = 5 [packed = true];
  if (this->flat_int8_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _flat_int8_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->flat_int8_, target);
  }

  // repeated int32 flat_int16 = 6 [packed = true];
  if (this->flat_int16_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _flat_int16_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->flat_int16_, target);
  }

  // repeated int32 flat_int32 = 7 [packed = true];
  if (this->flat_int32_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _flat_int32_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->flat_int32_, target);
  }

  // repeated int64 flat_int64 = 8 [packed = true];
  if (this->flat_int64_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      8,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _flat_int64_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->flat_int64_, target);
  }

  // repeated float flat_float16 = 9 [packed = true];
  if (this->flat_float16_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      9,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _flat_float16_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->flat_float16_, target);
  }

  // repeated float flat_float32 = 10 [packed = true];
  if (this->flat_float32_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      10,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _flat_float32_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->flat_float32_, target);
  }

  // repeated double flat_float64 = 11 [packed = true];
  if (this->flat_float64_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      11,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _flat_float64_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->flat_float64_, target);
  }

  // repeated string flat_string = 12;
  for (int i = 0, n = this->flat_string_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->flat_string(i).data(), static_cast<int>(this->flat_string(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grps.protos.v1.GenericTensor.flat_string");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(12, this->flat_string(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grps.protos.v1.GenericTensor)
  return target;
}

size_t GenericTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grps.protos.v1.GenericTensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 shape = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 flat_uint8 = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->flat_uint8_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _flat_uint8_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 flat_int8 = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->flat_int8_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _flat_int8_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 flat_int16 = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->flat_int16_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _flat_int16_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 flat_int32 = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->flat_int32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _flat_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 flat_int64 = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->flat_int64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _flat_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float flat_float16 = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->flat_float16_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _flat_float16_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float flat_float32 = 10 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->flat_float32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _flat_float32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double flat_float64 = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->flat_float64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _flat_float64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string flat_string = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->flat_string_size());
  for (int i = 0, n = this->flat_string_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->flat_string(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .grps.protos.v1.DataType dtype = 2;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericTensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grps.protos.v1.GenericTensor)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericTensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericTensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grps.protos.v1.GenericTensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grps.protos.v1.GenericTensor)
    MergeFrom(*source);
  }
}

void GenericTensor::MergeFrom(const GenericTensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grps.protos.v1.GenericTensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  flat_uint8_.MergeFrom(from.flat_uint8_);
  flat_int8_.MergeFrom(from.flat_int8_);
  flat_int16_.MergeFrom(from.flat_int16_);
  flat_int32_.MergeFrom(from.flat_int32_);
  flat_int64_.MergeFrom(from.flat_int64_);
  flat_float16_.MergeFrom(from.flat_float16_);
  flat_float32_.MergeFrom(from.flat_float32_);
  flat_float64_.MergeFrom(from.flat_float64_);
  flat_string_.MergeFrom(from.flat_string_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void GenericTensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grps.protos.v1.GenericTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericTensor::CopyFrom(const GenericTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grps.protos.v1.GenericTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericTensor::IsInitialized() const {
  return true;
}

void GenericTensor::InternalSwap(GenericTensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  flat_uint8_.InternalSwap(&other->flat_uint8_);
  flat_int8_.InternalSwap(&other->flat_int8_);
  flat_int16_.InternalSwap(&other->flat_int16_);
  flat_int32_.InternalSwap(&other->flat_int32_);
  flat_int64_.InternalSwap(&other->flat_int64_);
  flat_float16_.InternalSwap(&other->flat_float16_);
  flat_float32_.InternalSwap(&other->flat_float32_);
  flat_float64_.InternalSwap(&other->flat_float64_);
  flat_string_.InternalSwap(CastToBase(&other->flat_string_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericTensor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericTensorData::InitAsDefaultInstance() {
}
class GenericTensorData::_Internal {
 public:
};

GenericTensorData::GenericTensorData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grps.protos.v1.GenericTensorData)
}
GenericTensorData::GenericTensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  tensors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grps.protos.v1.GenericTensorData)
}
GenericTensorData::GenericTensorData(const GenericTensorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tensors_(from.tensors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grps.protos.v1.GenericTensorData)
}

void GenericTensorData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericTensorData_grps_2eproto.base);
}

GenericTensorData::~GenericTensorData() {
  // @@protoc_insertion_point(destructor:grps.protos.v1.GenericTensorData)
  SharedDtor();
}

void GenericTensorData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GenericTensorData::ArenaDtor(void* object) {
  GenericTensorData* _this = reinterpret_cast< GenericTensorData* >(object);
  (void)_this;
}
void GenericTensorData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericTensorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericTensorData& GenericTensorData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericTensorData_grps_2eproto.base);
  return *internal_default_instance();
}


void GenericTensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:grps.protos.v1.GenericTensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensors_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericTensorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .grps.protos.v1.GenericTensor tensors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericTensorData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:grps.protos.v1.GenericTensorData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .grps.protos.v1.GenericTensor tensors = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grps.protos.v1.GenericTensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grps.protos.v1.GenericTensorData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericTensorData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grps.protos.v1.GenericTensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grps.protos.v1.GenericTensor tensors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tensors(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grps.protos.v1.GenericTensorData)
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericTensorData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grps.protos.v1.GenericTensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .grps.protos.v1.GenericTensor tensors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensors_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tensors(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grps.protos.v1.GenericTensorData)
  return target;
}

size_t GenericTensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grps.protos.v1.GenericTensorData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grps.protos.v1.GenericTensor tensors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tensors(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericTensorData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grps.protos.v1.GenericTensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericTensorData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericTensorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grps.protos.v1.GenericTensorData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grps.protos.v1.GenericTensorData)
    MergeFrom(*source);
  }
}

void GenericTensorData::MergeFrom(const GenericTensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grps.protos.v1.GenericTensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensors_.MergeFrom(from.tensors_);
}

void GenericTensorData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grps.protos.v1.GenericTensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericTensorData::CopyFrom(const GenericTensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grps.protos.v1.GenericTensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericTensorData::IsInitialized() const {
  return true;
}

void GenericTensorData::InternalSwap(GenericTensorData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tensors_)->InternalSwap(CastToBase(&other->tensors_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericTensorData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NDArrayData::InitAsDefaultInstance() {
}
class NDArrayData::_Internal {
 public:
};

NDArrayData::NDArrayData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grps.protos.v1.NDArrayData)
}
NDArrayData::NDArrayData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grps.protos.v1.NDArrayData)
}
NDArrayData::NDArrayData(const NDArrayData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grps.protos.v1.NDArrayData)
}

void NDArrayData::SharedCtor() {
}

NDArrayData::~NDArrayData() {
  // @@protoc_insertion_point(destructor:grps.protos.v1.NDArrayData)
  SharedDtor();
}

void NDArrayData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void NDArrayData::ArenaDtor(void* object) {
  NDArrayData* _this = reinterpret_cast< NDArrayData* >(object);
  (void)_this;
}
void NDArrayData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NDArrayData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NDArrayData& NDArrayData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NDArrayData_grps_2eproto.base);
  return *internal_default_instance();
}


void NDArrayData::Clear() {
// @@protoc_insertion_point(message_clear_start:grps.protos.v1.NDArrayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NDArrayData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NDArrayData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:grps.protos.v1.NDArrayData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:grps.protos.v1.NDArrayData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grps.protos.v1.NDArrayData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NDArrayData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grps.protos.v1.NDArrayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grps.protos.v1.NDArrayData)
}

::PROTOBUF_NAMESPACE_ID::uint8* NDArrayData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grps.protos.v1.NDArrayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grps.protos.v1.NDArrayData)
  return target;
}

size_t NDArrayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grps.protos.v1.NDArrayData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NDArrayData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grps.protos.v1.NDArrayData)
  GOOGLE_DCHECK_NE(&from, this);
  const NDArrayData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NDArrayData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grps.protos.v1.NDArrayData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grps.protos.v1.NDArrayData)
    MergeFrom(*source);
  }
}

void NDArrayData::MergeFrom(const NDArrayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grps.protos.v1.NDArrayData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NDArrayData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grps.protos.v1.NDArrayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDArrayData::CopyFrom(const NDArrayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grps.protos.v1.NDArrayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDArrayData::IsInitialized() const {
  return true;
}

void NDArrayData::InternalSwap(NDArrayData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NDArrayData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GenericMapData_SSEntry_DoNotUse::GenericMapData_SSEntry_DoNotUse() {}
GenericMapData_SSEntry_DoNotUse::GenericMapData_SSEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GenericMapData_SSEntry_DoNotUse::MergeFrom(const GenericMapData_SSEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GenericMapData_SSEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GenericMapData_SSEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GenericMapData_SBEntry_DoNotUse::GenericMapData_SBEntry_DoNotUse() {}
GenericMapData_SBEntry_DoNotUse::GenericMapData_SBEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GenericMapData_SBEntry_DoNotUse::MergeFrom(const GenericMapData_SBEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GenericMapData_SBEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GenericMapData_SBEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GenericMapData_SI32Entry_DoNotUse::GenericMapData_SI32Entry_DoNotUse() {}
GenericMapData_SI32Entry_DoNotUse::GenericMapData_SI32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GenericMapData_SI32Entry_DoNotUse::MergeFrom(const GenericMapData_SI32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GenericMapData_SI32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GenericMapData_SI32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GenericMapData_SI64Entry_DoNotUse::GenericMapData_SI64Entry_DoNotUse() {}
GenericMapData_SI64Entry_DoNotUse::GenericMapData_SI64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GenericMapData_SI64Entry_DoNotUse::MergeFrom(const GenericMapData_SI64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GenericMapData_SI64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GenericMapData_SI64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GenericMapData_SFEntry_DoNotUse::GenericMapData_SFEntry_DoNotUse() {}
GenericMapData_SFEntry_DoNotUse::GenericMapData_SFEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GenericMapData_SFEntry_DoNotUse::MergeFrom(const GenericMapData_SFEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GenericMapData_SFEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GenericMapData_SFEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GenericMapData_SDEntry_DoNotUse::GenericMapData_SDEntry_DoNotUse() {}
GenericMapData_SDEntry_DoNotUse::GenericMapData_SDEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GenericMapData_SDEntry_DoNotUse::MergeFrom(const GenericMapData_SDEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GenericMapData_SDEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GenericMapData_SDEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GenericMapData::InitAsDefaultInstance() {
}
class GenericMapData::_Internal {
 public:
};

GenericMapData::GenericMapData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grps.protos.v1.GenericMapData)
}
GenericMapData::GenericMapData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  s_s_(arena),
  s_b_(arena),
  s_i32_(arena),
  s_i64_(arena),
  s_f_(arena),
  s_d_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grps.protos.v1.GenericMapData)
}
GenericMapData::GenericMapData(const GenericMapData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  s_s_.MergeFrom(from.s_s_);
  s_b_.MergeFrom(from.s_b_);
  s_i32_.MergeFrom(from.s_i32_);
  s_i64_.MergeFrom(from.s_i64_);
  s_f_.MergeFrom(from.s_f_);
  s_d_.MergeFrom(from.s_d_);
  // @@protoc_insertion_point(copy_constructor:grps.protos.v1.GenericMapData)
}

void GenericMapData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericMapData_grps_2eproto.base);
}

GenericMapData::~GenericMapData() {
  // @@protoc_insertion_point(destructor:grps.protos.v1.GenericMapData)
  SharedDtor();
}

void GenericMapData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GenericMapData::ArenaDtor(void* object) {
  GenericMapData* _this = reinterpret_cast< GenericMapData* >(object);
  (void)_this;
}
void GenericMapData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericMapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericMapData& GenericMapData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericMapData_grps_2eproto.base);
  return *internal_default_instance();
}


void GenericMapData::Clear() {
// @@protoc_insertion_point(message_clear_start:grps.protos.v1.GenericMapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_s_.Clear();
  s_b_.Clear();
  s_i32_.Clear();
  s_i64_.Clear();
  s_f_.Clear();
  s_d_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericMapData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> s_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&s_s_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // map<string, bytes> s_b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&s_b_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // map<string, int32> s_i32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&s_i32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // map<string, int64> s_i64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&s_i64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // map<string, float> s_f = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&s_f_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // map<string, double> s_d = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&s_d_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericMapData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:grps.protos.v1.GenericMapData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> s_s = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          GenericMapData_SSEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              GenericMapData_SSEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&s_s_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.GenericMapData.SSEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.GenericMapData.SSEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> s_b = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          GenericMapData_SBEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              GenericMapData_SBEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&s_b_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.GenericMapData.SBEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> s_i32 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          GenericMapData_SI32Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              GenericMapData_SI32Entry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::int32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 > > parser(&s_i32_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.GenericMapData.SI32Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> s_i64 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          GenericMapData_SI64Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              GenericMapData_SI64Entry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::int64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 > > parser(&s_i64_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.GenericMapData.SI64Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> s_f = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          GenericMapData_SFEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              GenericMapData_SFEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&s_f_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.GenericMapData.SFEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> s_d = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          GenericMapData_SDEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              GenericMapData_SDEntry_DoNotUse,
              std::string, double,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, double > > parser(&s_d_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.GenericMapData.SDEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grps.protos.v1.GenericMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grps.protos.v1.GenericMapData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericMapData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grps.protos.v1.GenericMapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> s_s = 1;
  if (!this->s_s().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SSEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SSEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->s_s().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_s().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->s_s().begin();
          it != this->s_s().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GenericMapData_SSEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->s_s().begin();
          it != this->s_s().end(); ++it) {
        GenericMapData_SSEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, bytes> s_b = 2;
  if (!this->s_b().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SBEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->s_b().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_b().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->s_b().begin();
          it != this->s_b().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GenericMapData_SBEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->s_b().begin();
          it != this->s_b().end(); ++it) {
        GenericMapData_SBEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int32> s_i32 = 3;
  if (!this->s_i32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SI32Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->s_i32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_i32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->s_i32().begin();
          it != this->s_i32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GenericMapData_SI32Entry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->s_i32().begin();
          it != this->s_i32().end(); ++it) {
        GenericMapData_SI32Entry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> s_i64 = 4;
  if (!this->s_i64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SI64Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->s_i64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_i64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->s_i64().begin();
          it != this->s_i64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GenericMapData_SI64Entry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->s_i64().begin();
          it != this->s_i64().end(); ++it) {
        GenericMapData_SI64Entry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, float> s_f = 5;
  if (!this->s_f().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SFEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->s_f().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_f().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->s_f().begin();
          it != this->s_f().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GenericMapData_SFEntry_DoNotUse::Funcs::SerializeToCodedStream(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->s_f().begin();
          it != this->s_f().end(); ++it) {
        GenericMapData_SFEntry_DoNotUse::Funcs::SerializeToCodedStream(5, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, double> s_d = 6;
  if (!this->s_d().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SDEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->s_d().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_d().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->s_d().begin();
          it != this->s_d().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GenericMapData_SDEntry_DoNotUse::Funcs::SerializeToCodedStream(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->s_d().begin();
          it != this->s_d().end(); ++it) {
        GenericMapData_SDEntry_DoNotUse::Funcs::SerializeToCodedStream(6, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grps.protos.v1.GenericMapData)
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericMapData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grps.protos.v1.GenericMapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> s_s = 1;
  if (!this->s_s().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SSEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SSEntry.value");
      }
    };

    if (false &&
        this->s_s().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_s().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->s_s().begin();
          it != this->s_s().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GenericMapData_SSEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->s_s().begin();
          it != this->s_s().end(); ++it) {
        target = GenericMapData_SSEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, bytes> s_b = 2;
  if (!this->s_b().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SBEntry.key");
      }
    };

    if (false &&
        this->s_b().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_b().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->s_b().begin();
          it != this->s_b().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GenericMapData_SBEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->s_b().begin();
          it != this->s_b().end(); ++it) {
        target = GenericMapData_SBEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int32> s_i32 = 3;
  if (!this->s_i32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SI32Entry.key");
      }
    };

    if (false &&
        this->s_i32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_i32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->s_i32().begin();
          it != this->s_i32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GenericMapData_SI32Entry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->s_i32().begin();
          it != this->s_i32().end(); ++it) {
        target = GenericMapData_SI32Entry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> s_i64 = 4;
  if (!this->s_i64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SI64Entry.key");
      }
    };

    if (false &&
        this->s_i64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_i64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->s_i64().begin();
          it != this->s_i64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GenericMapData_SI64Entry_DoNotUse::Funcs::SerializeToArray(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->s_i64().begin();
          it != this->s_i64().end(); ++it) {
        target = GenericMapData_SI64Entry_DoNotUse::Funcs::SerializeToArray(4, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, float> s_f = 5;
  if (!this->s_f().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SFEntry.key");
      }
    };

    if (false &&
        this->s_f().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_f().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->s_f().begin();
          it != this->s_f().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GenericMapData_SFEntry_DoNotUse::Funcs::SerializeToArray(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->s_f().begin();
          it != this->s_f().end(); ++it) {
        target = GenericMapData_SFEntry_DoNotUse::Funcs::SerializeToArray(5, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, double> s_d = 6;
  if (!this->s_d().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "grps.protos.v1.GenericMapData.SDEntry.key");
      }
    };

    if (false &&
        this->s_d().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->s_d().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->s_d().begin();
          it != this->s_d().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GenericMapData_SDEntry_DoNotUse::Funcs::SerializeToArray(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->s_d().begin();
          it != this->s_d().end(); ++it) {
        target = GenericMapData_SDEntry_DoNotUse::Funcs::SerializeToArray(6, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grps.protos.v1.GenericMapData)
  return target;
}

size_t GenericMapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grps.protos.v1.GenericMapData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> s_s = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->s_s_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->s_s().begin();
      it != this->s_s().end(); ++it) {
    total_size += GenericMapData_SSEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bytes> s_b = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->s_b_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->s_b().begin();
      it != this->s_b().end(); ++it) {
    total_size += GenericMapData_SBEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> s_i32 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->s_i32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->s_i32().begin();
      it != this->s_i32().end(); ++it) {
    total_size += GenericMapData_SI32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> s_i64 = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->s_i64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->s_i64().begin();
      it != this->s_i64().end(); ++it) {
    total_size += GenericMapData_SI64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, float> s_f = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->s_f_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->s_f().begin();
      it != this->s_f().end(); ++it) {
    total_size += GenericMapData_SFEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, double> s_d = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->s_d_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->s_d().begin();
      it != this->s_d().end(); ++it) {
    total_size += GenericMapData_SDEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericMapData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grps.protos.v1.GenericMapData)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericMapData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericMapData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grps.protos.v1.GenericMapData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grps.protos.v1.GenericMapData)
    MergeFrom(*source);
  }
}

void GenericMapData::MergeFrom(const GenericMapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grps.protos.v1.GenericMapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  s_s_.MergeFrom(from.s_s_);
  s_b_.MergeFrom(from.s_b_);
  s_i32_.MergeFrom(from.s_i32_);
  s_i64_.MergeFrom(from.s_i64_);
  s_f_.MergeFrom(from.s_f_);
  s_d_.MergeFrom(from.s_d_);
}

void GenericMapData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grps.protos.v1.GenericMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericMapData::CopyFrom(const GenericMapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grps.protos.v1.GenericMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericMapData::IsInitialized() const {
  return true;
}

void GenericMapData::InternalSwap(GenericMapData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  s_s_.Swap(&other->s_s_);
  s_b_.Swap(&other->s_b_);
  s_i32_.Swap(&other->s_i32_);
  s_i64_.Swap(&other->s_i64_);
  s_f_.Swap(&other->s_f_);
  s_d_.Swap(&other->s_d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericMapData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GrpsMessage::InitAsDefaultInstance() {
  ::grps::protos::v1::_GrpsMessage_default_instance_._instance.get_mutable()->status_ = const_cast< ::grps::protos::v1::Status*>(
      ::grps::protos::v1::Status::internal_default_instance());
  ::grps::protos::v1::_GrpsMessage_default_instance_.bin_data_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::grps::protos::v1::_GrpsMessage_default_instance_.str_data_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::grps::protos::v1::_GrpsMessage_default_instance_.gtensors_ = const_cast< ::grps::protos::v1::GenericTensorData*>(
      ::grps::protos::v1::GenericTensorData::internal_default_instance());
  ::grps::protos::v1::_GrpsMessage_default_instance_.ndarray_ = const_cast< ::grps::protos::v1::NDArrayData*>(
      ::grps::protos::v1::NDArrayData::internal_default_instance());
  ::grps::protos::v1::_GrpsMessage_default_instance_.gmap_ = const_cast< ::grps::protos::v1::GenericMapData*>(
      ::grps::protos::v1::GenericMapData::internal_default_instance());
}
class GrpsMessage::_Internal {
 public:
  static const ::grps::protos::v1::Status& status(const GrpsMessage* msg);
  static const ::grps::protos::v1::GenericTensorData& gtensors(const GrpsMessage* msg);
  static const ::grps::protos::v1::NDArrayData& ndarray(const GrpsMessage* msg);
  static const ::grps::protos::v1::GenericMapData& gmap(const GrpsMessage* msg);
};

const ::grps::protos::v1::Status&
GrpsMessage::_Internal::status(const GrpsMessage* msg) {
  return *msg->status_;
}
const ::grps::protos::v1::GenericTensorData&
GrpsMessage::_Internal::gtensors(const GrpsMessage* msg) {
  return *msg->data_oneof_.gtensors_;
}
const ::grps::protos::v1::NDArrayData&
GrpsMessage::_Internal::ndarray(const GrpsMessage* msg) {
  return *msg->data_oneof_.ndarray_;
}
const ::grps::protos::v1::GenericMapData&
GrpsMessage::_Internal::gmap(const GrpsMessage* msg) {
  return *msg->data_oneof_.gmap_;
}
void GrpsMessage::unsafe_arena_set_allocated_status(
    ::grps::protos::v1::Status* status) {
  if (GetArenaNoVirtual() == nullptr) {
    delete status_;
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grps.protos.v1.GrpsMessage.status)
}
void GrpsMessage::set_allocated_gtensors(::grps::protos::v1::GenericTensorData* gtensors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (gtensors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gtensors);
    if (message_arena != submessage_arena) {
      gtensors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gtensors, submessage_arena);
    }
    set_has_gtensors();
    data_oneof_.gtensors_ = gtensors;
  }
  // @@protoc_insertion_point(field_set_allocated:grps.protos.v1.GrpsMessage.gtensors)
}
void GrpsMessage::set_allocated_ndarray(::grps::protos::v1::NDArrayData* ndarray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (ndarray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ndarray);
    if (message_arena != submessage_arena) {
      ndarray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ndarray, submessage_arena);
    }
    set_has_ndarray();
    data_oneof_.ndarray_ = ndarray;
  }
  // @@protoc_insertion_point(field_set_allocated:grps.protos.v1.GrpsMessage.ndarray)
}
void GrpsMessage::set_allocated_gmap(::grps::protos::v1::GenericMapData* gmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data_oneof();
  if (gmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gmap);
    if (message_arena != submessage_arena) {
      gmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gmap, submessage_arena);
    }
    set_has_gmap();
    data_oneof_.gmap_ = gmap;
  }
  // @@protoc_insertion_point(field_set_allocated:grps.protos.v1.GrpsMessage.gmap)
}
GrpsMessage::GrpsMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grps.protos.v1.GrpsMessage)
}
GrpsMessage::GrpsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grps.protos.v1.GrpsMessage)
}
GrpsMessage::GrpsMessage(const GrpsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model().empty()) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model(),
      GetArenaNoVirtual());
  }
  if (from.has_status()) {
    status_ = new ::grps::protos::v1::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  clear_has_data_oneof();
  switch (from.data_oneof_case()) {
    case kBinData: {
      set_bin_data(from.bin_data());
      break;
    }
    case kStrData: {
      set_str_data(from.str_data());
      break;
    }
    case kGtensors: {
      mutable_gtensors()->::grps::protos::v1::GenericTensorData::MergeFrom(from.gtensors());
      break;
    }
    case kNdarray: {
      mutable_ndarray()->::grps::protos::v1::NDArrayData::MergeFrom(from.ndarray());
      break;
    }
    case kGmap: {
      mutable_gmap()->::grps::protos::v1::GenericMapData::MergeFrom(from.gmap());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grps.protos.v1.GrpsMessage)
}

void GrpsMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GrpsMessage_grps_2eproto.base);
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
  clear_has_data_oneof();
}

GrpsMessage::~GrpsMessage() {
  // @@protoc_insertion_point(destructor:grps.protos.v1.GrpsMessage)
  SharedDtor();
}

void GrpsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (has_data_oneof()) {
    clear_data_oneof();
  }
}

void GrpsMessage::ArenaDtor(void* object) {
  GrpsMessage* _this = reinterpret_cast< GrpsMessage* >(object);
  (void)_this;
}
void GrpsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GrpsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GrpsMessage& GrpsMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GrpsMessage_grps_2eproto.base);
  return *internal_default_instance();
}


void GrpsMessage::clear_data_oneof() {
// @@protoc_insertion_point(one_of_clear_start:grps.protos.v1.GrpsMessage)
  switch (data_oneof_case()) {
    case kBinData: {
      data_oneof_.bin_data_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kStrData: {
      data_oneof_.str_data_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kGtensors: {
      if (GetArenaNoVirtual() == nullptr) {
        delete data_oneof_.gtensors_;
      }
      break;
    }
    case kNdarray: {
      if (GetArenaNoVirtual() == nullptr) {
        delete data_oneof_.ndarray_;
      }
      break;
    }
    case kGmap: {
      if (GetArenaNoVirtual() == nullptr) {
        delete data_oneof_.gmap_;
      }
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}


void GrpsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:grps.protos.v1.GrpsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  clear_data_oneof();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GrpsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .grps.protos.v1.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model(), ptr, ctx, "grps.protos.v1.GrpsMessage.model");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bin_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_bin_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_str_data(), ptr, ctx, "grps.protos.v1.GrpsMessage.str_data");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grps.protos.v1.GenericTensorData gtensors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_gtensors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grps.protos.v1.NDArrayData ndarray = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ndarray(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grps.protos.v1.GenericMapData gmap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_gmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GrpsMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:grps.protos.v1.GrpsMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .grps.protos.v1.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.GrpsMessage.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes bin_data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bin_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string str_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_str_data()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->str_data().data(), static_cast<int>(this->str_data().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.GrpsMessage.str_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grps.protos.v1.GenericTensorData gtensors = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gtensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grps.protos.v1.NDArrayData ndarray = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ndarray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grps.protos.v1.GenericMapData gmap = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grps.protos.v1.GrpsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grps.protos.v1.GrpsMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GrpsMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grps.protos.v1.GrpsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grps.protos.v1.Status status = 1;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::status(this), output);
  }

  // string model = 2;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grps.protos.v1.GrpsMessage.model");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // bytes bin_data = 3;
  if (has_bin_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->bin_data(), output);
  }

  // string str_data = 4;
  if (has_str_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->str_data().data(), static_cast<int>(this->str_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grps.protos.v1.GrpsMessage.str_data");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->str_data(), output);
  }

  // .grps.protos.v1.GenericTensorData gtensors = 5;
  if (has_gtensors()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::gtensors(this), output);
  }

  // .grps.protos.v1.NDArrayData ndarray = 6;
  if (has_ndarray()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::ndarray(this), output);
  }

  // .grps.protos.v1.GenericMapData gmap = 7;
  if (has_gmap()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::gmap(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grps.protos.v1.GrpsMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* GrpsMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grps.protos.v1.GrpsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grps.protos.v1.Status status = 1;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target);
  }

  // string model = 2;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grps.protos.v1.GrpsMessage.model");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }

  // bytes bin_data = 3;
  if (has_bin_data()) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->bin_data(), target);
  }

  // string str_data = 4;
  if (has_str_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->str_data().data(), static_cast<int>(this->str_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grps.protos.v1.GrpsMessage.str_data");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->str_data(), target);
  }

  // .grps.protos.v1.GenericTensorData gtensors = 5;
  if (has_gtensors()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::gtensors(this), target);
  }

  // .grps.protos.v1.NDArrayData ndarray = 6;
  if (has_ndarray()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::ndarray(this), target);
  }

  // .grps.protos.v1.GenericMapData gmap = 7;
  if (has_gmap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::gmap(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grps.protos.v1.GrpsMessage)
  return target;
}

size_t GrpsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grps.protos.v1.GrpsMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model());
  }

  // .grps.protos.v1.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  switch (data_oneof_case()) {
    // bytes bin_data = 3;
    case kBinData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->bin_data());
      break;
    }
    // string str_data = 4;
    case kStrData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->str_data());
      break;
    }
    // .grps.protos.v1.GenericTensorData gtensors = 5;
    case kGtensors: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.gtensors_);
      break;
    }
    // .grps.protos.v1.NDArrayData ndarray = 6;
    case kNdarray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.ndarray_);
      break;
    }
    // .grps.protos.v1.GenericMapData gmap = 7;
    case kGmap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.gmap_);
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrpsMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grps.protos.v1.GrpsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GrpsMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrpsMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grps.protos.v1.GrpsMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grps.protos.v1.GrpsMessage)
    MergeFrom(*source);
  }
}

void GrpsMessage::MergeFrom(const GrpsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grps.protos.v1.GrpsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {
    set_model(from.model());
  }
  if (from.has_status()) {
    mutable_status()->::grps::protos::v1::Status::MergeFrom(from.status());
  }
  switch (from.data_oneof_case()) {
    case kBinData: {
      set_bin_data(from.bin_data());
      break;
    }
    case kStrData: {
      set_str_data(from.str_data());
      break;
    }
    case kGtensors: {
      mutable_gtensors()->::grps::protos::v1::GenericTensorData::MergeFrom(from.gtensors());
      break;
    }
    case kNdarray: {
      mutable_ndarray()->::grps::protos::v1::NDArrayData::MergeFrom(from.ndarray());
      break;
    }
    case kGmap: {
      mutable_gmap()->::grps::protos::v1::GenericMapData::MergeFrom(from.gmap());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
}

void GrpsMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grps.protos.v1.GrpsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrpsMessage::CopyFrom(const GrpsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grps.protos.v1.GrpsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrpsMessage::IsInitialized() const {
  return true;
}

void GrpsMessage::InternalSwap(GrpsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(data_oneof_, other->data_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrpsMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
class Status::_Internal {
 public:
};

Status::Status()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grps.protos.v1.Status)
}
Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grps.protos.v1.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg(),
      GetArenaNoVirtual());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&code_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:grps.protos.v1.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_grps_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&code_)) + sizeof(status_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:grps.protos.v1.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_grps_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:grps.protos.v1.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&code_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "grps.protos.v1.Status.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grps.protos.v1.Status.StatusFlag status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::grps::protos::v1::Status_StatusFlag>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Status::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:grps.protos.v1.Status)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "grps.protos.v1.Status.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .grps.protos.v1.Status.StatusFlag status = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::grps::protos::v1::Status_StatusFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grps.protos.v1.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grps.protos.v1.Status)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Status::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grps.protos.v1.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grps.protos.v1.Status.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // .grps.protos.v1.Status.StatusFlag status = 3;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grps.protos.v1.Status)
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grps.protos.v1.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grps.protos.v1.Status.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // .grps.protos.v1.Status.StatusFlag status = 3;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grps.protos.v1.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grps.protos.v1.Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // .grps.protos.v1.Status.StatusFlag status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grps.protos.v1.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grps.protos.v1.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grps.protos.v1.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grps.protos.v1.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    set_msg(from.msg());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grps.protos.v1.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grps.protos.v1.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmptyGrpsMessage::InitAsDefaultInstance() {
}
class EmptyGrpsMessage::_Internal {
 public:
};

EmptyGrpsMessage::EmptyGrpsMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grps.protos.v1.EmptyGrpsMessage)
}
EmptyGrpsMessage::EmptyGrpsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grps.protos.v1.EmptyGrpsMessage)
}
EmptyGrpsMessage::EmptyGrpsMessage(const EmptyGrpsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grps.protos.v1.EmptyGrpsMessage)
}

void EmptyGrpsMessage::SharedCtor() {
}

EmptyGrpsMessage::~EmptyGrpsMessage() {
  // @@protoc_insertion_point(destructor:grps.protos.v1.EmptyGrpsMessage)
  SharedDtor();
}

void EmptyGrpsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void EmptyGrpsMessage::ArenaDtor(void* object) {
  EmptyGrpsMessage* _this = reinterpret_cast< EmptyGrpsMessage* >(object);
  (void)_this;
}
void EmptyGrpsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmptyGrpsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyGrpsMessage& EmptyGrpsMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmptyGrpsMessage_grps_2eproto.base);
  return *internal_default_instance();
}


void EmptyGrpsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:grps.protos.v1.EmptyGrpsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmptyGrpsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmptyGrpsMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:grps.protos.v1.EmptyGrpsMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:grps.protos.v1.EmptyGrpsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grps.protos.v1.EmptyGrpsMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmptyGrpsMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grps.protos.v1.EmptyGrpsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grps.protos.v1.EmptyGrpsMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyGrpsMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grps.protos.v1.EmptyGrpsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grps.protos.v1.EmptyGrpsMessage)
  return target;
}

size_t EmptyGrpsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grps.protos.v1.EmptyGrpsMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyGrpsMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grps.protos.v1.EmptyGrpsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyGrpsMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmptyGrpsMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grps.protos.v1.EmptyGrpsMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grps.protos.v1.EmptyGrpsMessage)
    MergeFrom(*source);
  }
}

void EmptyGrpsMessage::MergeFrom(const EmptyGrpsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grps.protos.v1.EmptyGrpsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmptyGrpsMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grps.protos.v1.EmptyGrpsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyGrpsMessage::CopyFrom(const EmptyGrpsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grps.protos.v1.EmptyGrpsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyGrpsMessage::IsInitialized() const {
  return true;
}

void EmptyGrpsMessage::InternalSwap(EmptyGrpsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyGrpsMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protos
}  // namespace grps
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grps::protos::v1::GenericTensor* Arena::CreateMaybeMessage< ::grps::protos::v1::GenericTensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::GenericTensor >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::GenericTensorData* Arena::CreateMaybeMessage< ::grps::protos::v1::GenericTensorData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::GenericTensorData >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::NDArrayData* Arena::CreateMaybeMessage< ::grps::protos::v1::NDArrayData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::NDArrayData >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::GenericMapData_SSEntry_DoNotUse* Arena::CreateMaybeMessage< ::grps::protos::v1::GenericMapData_SSEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::GenericMapData_SSEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::GenericMapData_SBEntry_DoNotUse* Arena::CreateMaybeMessage< ::grps::protos::v1::GenericMapData_SBEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::GenericMapData_SBEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse* Arena::CreateMaybeMessage< ::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse* Arena::CreateMaybeMessage< ::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::GenericMapData_SFEntry_DoNotUse* Arena::CreateMaybeMessage< ::grps::protos::v1::GenericMapData_SFEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::GenericMapData_SFEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::GenericMapData_SDEntry_DoNotUse* Arena::CreateMaybeMessage< ::grps::protos::v1::GenericMapData_SDEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::GenericMapData_SDEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::GenericMapData* Arena::CreateMaybeMessage< ::grps::protos::v1::GenericMapData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::GenericMapData >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::GrpsMessage* Arena::CreateMaybeMessage< ::grps::protos::v1::GrpsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::GrpsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::Status* Arena::CreateMaybeMessage< ::grps::protos::v1::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::grps::protos::v1::EmptyGrpsMessage* Arena::CreateMaybeMessage< ::grps::protos::v1::EmptyGrpsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grps::protos::v1::EmptyGrpsMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
