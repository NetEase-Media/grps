// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grps_2eproto;
namespace grps {
namespace protos {
namespace v1 {
class EmptyGrpsMessage;
class EmptyGrpsMessageDefaultTypeInternal;
extern EmptyGrpsMessageDefaultTypeInternal _EmptyGrpsMessage_default_instance_;
class GenericMapData;
class GenericMapDataDefaultTypeInternal;
extern GenericMapDataDefaultTypeInternal _GenericMapData_default_instance_;
class GenericMapData_SBEntry_DoNotUse;
class GenericMapData_SBEntry_DoNotUseDefaultTypeInternal;
extern GenericMapData_SBEntry_DoNotUseDefaultTypeInternal _GenericMapData_SBEntry_DoNotUse_default_instance_;
class GenericMapData_SDEntry_DoNotUse;
class GenericMapData_SDEntry_DoNotUseDefaultTypeInternal;
extern GenericMapData_SDEntry_DoNotUseDefaultTypeInternal _GenericMapData_SDEntry_DoNotUse_default_instance_;
class GenericMapData_SFEntry_DoNotUse;
class GenericMapData_SFEntry_DoNotUseDefaultTypeInternal;
extern GenericMapData_SFEntry_DoNotUseDefaultTypeInternal _GenericMapData_SFEntry_DoNotUse_default_instance_;
class GenericMapData_SI32Entry_DoNotUse;
class GenericMapData_SI32Entry_DoNotUseDefaultTypeInternal;
extern GenericMapData_SI32Entry_DoNotUseDefaultTypeInternal _GenericMapData_SI32Entry_DoNotUse_default_instance_;
class GenericMapData_SI64Entry_DoNotUse;
class GenericMapData_SI64Entry_DoNotUseDefaultTypeInternal;
extern GenericMapData_SI64Entry_DoNotUseDefaultTypeInternal _GenericMapData_SI64Entry_DoNotUse_default_instance_;
class GenericMapData_SSEntry_DoNotUse;
class GenericMapData_SSEntry_DoNotUseDefaultTypeInternal;
extern GenericMapData_SSEntry_DoNotUseDefaultTypeInternal _GenericMapData_SSEntry_DoNotUse_default_instance_;
class GenericTensor;
class GenericTensorDefaultTypeInternal;
extern GenericTensorDefaultTypeInternal _GenericTensor_default_instance_;
class GenericTensorData;
class GenericTensorDataDefaultTypeInternal;
extern GenericTensorDataDefaultTypeInternal _GenericTensorData_default_instance_;
class GrpsMessage;
class GrpsMessageDefaultTypeInternal;
extern GrpsMessageDefaultTypeInternal _GrpsMessage_default_instance_;
class NDArrayData;
class NDArrayDataDefaultTypeInternal;
extern NDArrayDataDefaultTypeInternal _NDArrayData_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace v1
}  // namespace protos
}  // namespace grps
PROTOBUF_NAMESPACE_OPEN
template<> ::grps::protos::v1::EmptyGrpsMessage* Arena::CreateMaybeMessage<::grps::protos::v1::EmptyGrpsMessage>(Arena*);
template<> ::grps::protos::v1::GenericMapData* Arena::CreateMaybeMessage<::grps::protos::v1::GenericMapData>(Arena*);
template<> ::grps::protos::v1::GenericMapData_SBEntry_DoNotUse* Arena::CreateMaybeMessage<::grps::protos::v1::GenericMapData_SBEntry_DoNotUse>(Arena*);
template<> ::grps::protos::v1::GenericMapData_SDEntry_DoNotUse* Arena::CreateMaybeMessage<::grps::protos::v1::GenericMapData_SDEntry_DoNotUse>(Arena*);
template<> ::grps::protos::v1::GenericMapData_SFEntry_DoNotUse* Arena::CreateMaybeMessage<::grps::protos::v1::GenericMapData_SFEntry_DoNotUse>(Arena*);
template<> ::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse* Arena::CreateMaybeMessage<::grps::protos::v1::GenericMapData_SI32Entry_DoNotUse>(Arena*);
template<> ::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse* Arena::CreateMaybeMessage<::grps::protos::v1::GenericMapData_SI64Entry_DoNotUse>(Arena*);
template<> ::grps::protos::v1::GenericMapData_SSEntry_DoNotUse* Arena::CreateMaybeMessage<::grps::protos::v1::GenericMapData_SSEntry_DoNotUse>(Arena*);
template<> ::grps::protos::v1::GenericTensor* Arena::CreateMaybeMessage<::grps::protos::v1::GenericTensor>(Arena*);
template<> ::grps::protos::v1::GenericTensorData* Arena::CreateMaybeMessage<::grps::protos::v1::GenericTensorData>(Arena*);
template<> ::grps::protos::v1::GrpsMessage* Arena::CreateMaybeMessage<::grps::protos::v1::GrpsMessage>(Arena*);
template<> ::grps::protos::v1::NDArrayData* Arena::CreateMaybeMessage<::grps::protos::v1::NDArrayData>(Arena*);
template<> ::grps::protos::v1::Status* Arena::CreateMaybeMessage<::grps::protos::v1::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grps {
namespace protos {
namespace v1 {

enum Status_StatusFlag : int {
  Status_StatusFlag_UNKNOWN = 0,
  Status_StatusFlag_SUCCESS = 1,
  Status_StatusFlag_FAILURE = 2,
  Status_StatusFlag_Status_StatusFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_StatusFlag_Status_StatusFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_StatusFlag_IsValid(int value);
constexpr Status_StatusFlag Status_StatusFlag_StatusFlag_MIN = Status_StatusFlag_UNKNOWN;
constexpr Status_StatusFlag Status_StatusFlag_StatusFlag_MAX = Status_StatusFlag_FAILURE;
constexpr int Status_StatusFlag_StatusFlag_ARRAYSIZE = Status_StatusFlag_StatusFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_StatusFlag_descriptor();
template<typename T>
inline const std::string& Status_StatusFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_StatusFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_StatusFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_StatusFlag_descriptor(), enum_t_value);
}
inline bool Status_StatusFlag_Parse(
    const std::string& name, Status_StatusFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_StatusFlag>(
    Status_StatusFlag_descriptor(), name, value);
}
enum DataType : int {
  DT_INVALID = 0,
  DT_UINT8 = 1,
  DT_INT8 = 2,
  DT_INT16 = 3,
  DT_INT32 = 4,
  DT_INT64 = 5,
  DT_FLOAT16 = 6,
  DT_FLOAT32 = 7,
  DT_FLOAT64 = 8,
  DT_STRING = 9,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = DT_INVALID;
constexpr DataType DataType_MAX = DT_STRING;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    const std::string& name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class GenericTensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grps.protos.v1.GenericTensor) */ {
 public:
  GenericTensor();
  virtual ~GenericTensor();

  GenericTensor(const GenericTensor& from);
  GenericTensor(GenericTensor&& from) noexcept
    : GenericTensor() {
    *this = ::std::move(from);
  }

  inline GenericTensor& operator=(const GenericTensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericTensor& operator=(GenericTensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericTensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericTensor* internal_default_instance() {
    return reinterpret_cast<const GenericTensor*>(
               &_GenericTensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenericTensor& a, GenericTensor& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericTensor* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericTensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericTensor* New() const final {
    return CreateMaybeMessage<GenericTensor>(nullptr);
  }

  GenericTensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericTensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericTensor& from);
  void MergeFrom(const GenericTensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericTensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grps.protos.v1.GenericTensor";
  }
  protected:
  explicit GenericTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 3,
    kFlatUint8FieldNumber = 4,
    kFlatInt8FieldNumber = 5,
    kFlatInt16FieldNumber = 6,
    kFlatInt32FieldNumber = 7,
    kFlatInt64FieldNumber = 8,
    kFlatFloat16FieldNumber = 9,
    kFlatFloat32FieldNumber = 10,
    kFlatFloat64FieldNumber = 11,
    kFlatStringFieldNumber = 12,
    kNameFieldNumber = 1,
    kDtypeFieldNumber = 2,
  };
  // repeated uint32 shape = 3 [packed = true];
  int shape_size() const;
  void clear_shape();
  ::PROTOBUF_NAMESPACE_ID::uint32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_shape();

  // repeated uint32 flat_uint8 = 4 [packed = true];
  int flat_uint8_size() const;
  void clear_flat_uint8();
  ::PROTOBUF_NAMESPACE_ID::uint32 flat_uint8(int index) const;
  void set_flat_uint8(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_flat_uint8(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      flat_uint8() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_flat_uint8();

  // repeated int32 flat_int8 = 5 [packed = true];
  int flat_int8_size() const;
  void clear_flat_int8();
  ::PROTOBUF_NAMESPACE_ID::int32 flat_int8(int index) const;
  void set_flat_int8(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_flat_int8(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      flat_int8() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_flat_int8();

  // repeated int32 flat_int16 = 6 [packed = true];
  int flat_int16_size() const;
  void clear_flat_int16();
  ::PROTOBUF_NAMESPACE_ID::int32 flat_int16(int index) const;
  void set_flat_int16(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_flat_int16(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      flat_int16() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_flat_int16();

  // repeated int32 flat_int32 = 7 [packed = true];
  int flat_int32_size() const;
  void clear_flat_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 flat_int32(int index) const;
  void set_flat_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_flat_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      flat_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_flat_int32();

  // repeated int64 flat_int64 = 8 [packed = true];
  int flat_int64_size() const;
  void clear_flat_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 flat_int64(int index) const;
  void set_flat_int64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_flat_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      flat_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_flat_int64();

  // repeated float flat_float16 = 9 [packed = true];
  int flat_float16_size() const;
  void clear_flat_float16();
  float flat_float16(int index) const;
  void set_flat_float16(int index, float value);
  void add_flat_float16(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      flat_float16() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_flat_float16();

  // repeated float flat_float32 = 10 [packed = true];
  int flat_float32_size() const;
  void clear_flat_float32();
  float flat_float32(int index) const;
  void set_flat_float32(int index, float value);
  void add_flat_float32(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      flat_float32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_flat_float32();

  // repeated double flat_float64 = 11 [packed = true];
  int flat_float64_size() const;
  void clear_flat_float64();
  double flat_float64(int index) const;
  void set_flat_float64(int index, double value);
  void add_flat_float64(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      flat_float64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_flat_float64();

  // repeated string flat_string = 12;
  int flat_string_size() const;
  void clear_flat_string();
  const std::string& flat_string(int index) const;
  std::string* mutable_flat_string(int index);
  void set_flat_string(int index, const std::string& value);
  void set_flat_string(int index, std::string&& value);
  void set_flat_string(int index, const char* value);
  void set_flat_string(int index, const char* value, size_t size);
  std::string* add_flat_string();
  void add_flat_string(const std::string& value);
  void add_flat_string(std::string&& value);
  void add_flat_string(const char* value);
  void add_flat_string(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& flat_string() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_flat_string();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);

  // .grps.protos.v1.DataType dtype = 2;
  void clear_dtype();
  ::grps::protos::v1::DataType dtype() const;
  void set_dtype(::grps::protos::v1::DataType value);

  // @@protoc_insertion_point(class_scope:grps.protos.v1.GenericTensor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > flat_uint8_;
  mutable std::atomic<int> _flat_uint8_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > flat_int8_;
  mutable std::atomic<int> _flat_int8_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > flat_int16_;
  mutable std::atomic<int> _flat_int16_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > flat_int32_;
  mutable std::atomic<int> _flat_int32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > flat_int64_;
  mutable std::atomic<int> _flat_int64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > flat_float16_;
  mutable std::atomic<int> _flat_float16_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > flat_float32_;
  mutable std::atomic<int> _flat_float32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > flat_float64_;
  mutable std::atomic<int> _flat_float64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> flat_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int dtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grps_2eproto;
};
// -------------------------------------------------------------------

class GenericTensorData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grps.protos.v1.GenericTensorData) */ {
 public:
  GenericTensorData();
  virtual ~GenericTensorData();

  GenericTensorData(const GenericTensorData& from);
  GenericTensorData(GenericTensorData&& from) noexcept
    : GenericTensorData() {
    *this = ::std::move(from);
  }

  inline GenericTensorData& operator=(const GenericTensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericTensorData& operator=(GenericTensorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericTensorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericTensorData* internal_default_instance() {
    return reinterpret_cast<const GenericTensorData*>(
               &_GenericTensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenericTensorData& a, GenericTensorData& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericTensorData* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericTensorData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericTensorData* New() const final {
    return CreateMaybeMessage<GenericTensorData>(nullptr);
  }

  GenericTensorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericTensorData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericTensorData& from);
  void MergeFrom(const GenericTensorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericTensorData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grps.protos.v1.GenericTensorData";
  }
  protected:
  explicit GenericTensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorsFieldNumber = 1,
  };
  // repeated .grps.protos.v1.GenericTensor tensors = 1;
  int tensors_size() const;
  void clear_tensors();
  ::grps::protos::v1::GenericTensor* mutable_tensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grps::protos::v1::GenericTensor >*
      mutable_tensors();
  const ::grps::protos::v1::GenericTensor& tensors(int index) const;
  ::grps::protos::v1::GenericTensor* add_tensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grps::protos::v1::GenericTensor >&
      tensors() const;

  // @@protoc_insertion_point(class_scope:grps.protos.v1.GenericTensorData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grps::protos::v1::GenericTensor > tensors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grps_2eproto;
};
// -------------------------------------------------------------------

class NDArrayData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grps.protos.v1.NDArrayData) */ {
 public:
  NDArrayData();
  virtual ~NDArrayData();

  NDArrayData(const NDArrayData& from);
  NDArrayData(NDArrayData&& from) noexcept
    : NDArrayData() {
    *this = ::std::move(from);
  }

  inline NDArrayData& operator=(const NDArrayData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NDArrayData& operator=(NDArrayData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NDArrayData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NDArrayData* internal_default_instance() {
    return reinterpret_cast<const NDArrayData*>(
               &_NDArrayData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NDArrayData& a, NDArrayData& b) {
    a.Swap(&b);
  }
  inline void Swap(NDArrayData* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NDArrayData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NDArrayData* New() const final {
    return CreateMaybeMessage<NDArrayData>(nullptr);
  }

  NDArrayData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NDArrayData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NDArrayData& from);
  void MergeFrom(const NDArrayData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NDArrayData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grps.protos.v1.NDArrayData";
  }
  protected:
  explicit NDArrayData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grps.protos.v1.NDArrayData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grps_2eproto;
};
// -------------------------------------------------------------------

class GenericMapData_SSEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SSEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SSEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GenericMapData_SSEntry_DoNotUse();
  GenericMapData_SSEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GenericMapData_SSEntry_DoNotUse& other);
  static const GenericMapData_SSEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GenericMapData_SSEntry_DoNotUse*>(&_GenericMapData_SSEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grps.protos.v1.GenericMapData.SSEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grps.protos.v1.GenericMapData.SSEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class GenericMapData_SBEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SBEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SBEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  GenericMapData_SBEntry_DoNotUse();
  GenericMapData_SBEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GenericMapData_SBEntry_DoNotUse& other);
  static const GenericMapData_SBEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GenericMapData_SBEntry_DoNotUse*>(&_GenericMapData_SBEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grps.protos.v1.GenericMapData.SBEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class GenericMapData_SI32Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SI32Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SI32Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  GenericMapData_SI32Entry_DoNotUse();
  GenericMapData_SI32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GenericMapData_SI32Entry_DoNotUse& other);
  static const GenericMapData_SI32Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GenericMapData_SI32Entry_DoNotUse*>(&_GenericMapData_SI32Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grps.protos.v1.GenericMapData.SI32Entry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class GenericMapData_SI64Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SI64Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SI64Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  GenericMapData_SI64Entry_DoNotUse();
  GenericMapData_SI64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GenericMapData_SI64Entry_DoNotUse& other);
  static const GenericMapData_SI64Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GenericMapData_SI64Entry_DoNotUse*>(&_GenericMapData_SI64Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grps.protos.v1.GenericMapData.SI64Entry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class GenericMapData_SFEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SFEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SFEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  GenericMapData_SFEntry_DoNotUse();
  GenericMapData_SFEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GenericMapData_SFEntry_DoNotUse& other);
  static const GenericMapData_SFEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GenericMapData_SFEntry_DoNotUse*>(&_GenericMapData_SFEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grps.protos.v1.GenericMapData.SFEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class GenericMapData_SDEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SDEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GenericMapData_SDEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  GenericMapData_SDEntry_DoNotUse();
  GenericMapData_SDEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GenericMapData_SDEntry_DoNotUse& other);
  static const GenericMapData_SDEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GenericMapData_SDEntry_DoNotUse*>(&_GenericMapData_SDEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "grps.protos.v1.GenericMapData.SDEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class GenericMapData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grps.protos.v1.GenericMapData) */ {
 public:
  GenericMapData();
  virtual ~GenericMapData();

  GenericMapData(const GenericMapData& from);
  GenericMapData(GenericMapData&& from) noexcept
    : GenericMapData() {
    *this = ::std::move(from);
  }

  inline GenericMapData& operator=(const GenericMapData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericMapData& operator=(GenericMapData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericMapData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericMapData* internal_default_instance() {
    return reinterpret_cast<const GenericMapData*>(
               &_GenericMapData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GenericMapData& a, GenericMapData& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericMapData* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericMapData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericMapData* New() const final {
    return CreateMaybeMessage<GenericMapData>(nullptr);
  }

  GenericMapData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericMapData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericMapData& from);
  void MergeFrom(const GenericMapData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericMapData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grps.protos.v1.GenericMapData";
  }
  protected:
  explicit GenericMapData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSSFieldNumber = 1,
    kSBFieldNumber = 2,
    kSI32FieldNumber = 3,
    kSI64FieldNumber = 4,
    kSFFieldNumber = 5,
    kSDFieldNumber = 6,
  };
  // map<string, string> s_s = 1;
  int s_s_size() const;
  void clear_s_s();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      s_s() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_s_s();

  // map<string, bytes> s_b = 2;
  int s_b_size() const;
  void clear_s_b();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      s_b() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_s_b();

  // map<string, int32> s_i32 = 3;
  int s_i32_size() const;
  void clear_s_i32();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      s_i32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_s_i32();

  // map<string, int64> s_i64 = 4;
  int s_i64_size() const;
  void clear_s_i64();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      s_i64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_s_i64();

  // map<string, float> s_f = 5;
  int s_f_size() const;
  void clear_s_f();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      s_f() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_s_f();

  // map<string, double> s_d = 6;
  int s_d_size() const;
  void clear_s_d();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      s_d() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_s_d();

  // @@protoc_insertion_point(class_scope:grps.protos.v1.GenericMapData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GenericMapData_SSEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > s_s_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GenericMapData_SBEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > s_b_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GenericMapData_SI32Entry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > s_i32_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GenericMapData_SI64Entry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > s_i64_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GenericMapData_SFEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > s_f_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GenericMapData_SDEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
      0 > s_d_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grps_2eproto;
};
// -------------------------------------------------------------------

class GrpsMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grps.protos.v1.GrpsMessage) */ {
 public:
  GrpsMessage();
  virtual ~GrpsMessage();

  GrpsMessage(const GrpsMessage& from);
  GrpsMessage(GrpsMessage&& from) noexcept
    : GrpsMessage() {
    *this = ::std::move(from);
  }

  inline GrpsMessage& operator=(const GrpsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrpsMessage& operator=(GrpsMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GrpsMessage& default_instance();

  enum DataOneofCase {
    kBinData = 3,
    kStrData = 4,
    kGtensors = 5,
    kNdarray = 6,
    kGmap = 7,
    DATA_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GrpsMessage* internal_default_instance() {
    return reinterpret_cast<const GrpsMessage*>(
               &_GrpsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GrpsMessage& a, GrpsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GrpsMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrpsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GrpsMessage* New() const final {
    return CreateMaybeMessage<GrpsMessage>(nullptr);
  }

  GrpsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GrpsMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GrpsMessage& from);
  void MergeFrom(const GrpsMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrpsMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grps.protos.v1.GrpsMessage";
  }
  protected:
  explicit GrpsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kStatusFieldNumber = 1,
    kBinDataFieldNumber = 3,
    kStrDataFieldNumber = 4,
    kGtensorsFieldNumber = 5,
    kNdarrayFieldNumber = 6,
    kGmapFieldNumber = 7,
  };
  // string model = 2;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_model();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model(
      std::string* model);

  // .grps.protos.v1.Status status = 1;
  bool has_status() const;
  void clear_status();
  const ::grps::protos::v1::Status& status() const;
  ::grps::protos::v1::Status* release_status();
  ::grps::protos::v1::Status* mutable_status();
  void set_allocated_status(::grps::protos::v1::Status* status);
  void unsafe_arena_set_allocated_status(
      ::grps::protos::v1::Status* status);
  ::grps::protos::v1::Status* unsafe_arena_release_status();

  // bytes bin_data = 3;
  private:
  bool has_bin_data() const;
  public:
  void clear_bin_data();
  const std::string& bin_data() const;
  void set_bin_data(const std::string& value);
  void set_bin_data(std::string&& value);
  void set_bin_data(const char* value);
  void set_bin_data(const void* value, size_t size);
  std::string* mutable_bin_data();
  std::string* release_bin_data();
  void set_allocated_bin_data(std::string* bin_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bin_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bin_data(
      std::string* bin_data);

  // string str_data = 4;
  private:
  bool has_str_data() const;
  public:
  void clear_str_data();
  const std::string& str_data() const;
  void set_str_data(const std::string& value);
  void set_str_data(std::string&& value);
  void set_str_data(const char* value);
  void set_str_data(const char* value, size_t size);
  std::string* mutable_str_data();
  std::string* release_str_data();
  void set_allocated_str_data(std::string* str_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_str_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_str_data(
      std::string* str_data);

  // .grps.protos.v1.GenericTensorData gtensors = 5;
  bool has_gtensors() const;
  void clear_gtensors();
  const ::grps::protos::v1::GenericTensorData& gtensors() const;
  ::grps::protos::v1::GenericTensorData* release_gtensors();
  ::grps::protos::v1::GenericTensorData* mutable_gtensors();
  void set_allocated_gtensors(::grps::protos::v1::GenericTensorData* gtensors);
  void unsafe_arena_set_allocated_gtensors(
      ::grps::protos::v1::GenericTensorData* gtensors);
  ::grps::protos::v1::GenericTensorData* unsafe_arena_release_gtensors();

  // .grps.protos.v1.NDArrayData ndarray = 6;
  bool has_ndarray() const;
  void clear_ndarray();
  const ::grps::protos::v1::NDArrayData& ndarray() const;
  ::grps::protos::v1::NDArrayData* release_ndarray();
  ::grps::protos::v1::NDArrayData* mutable_ndarray();
  void set_allocated_ndarray(::grps::protos::v1::NDArrayData* ndarray);
  void unsafe_arena_set_allocated_ndarray(
      ::grps::protos::v1::NDArrayData* ndarray);
  ::grps::protos::v1::NDArrayData* unsafe_arena_release_ndarray();

  // .grps.protos.v1.GenericMapData gmap = 7;
  bool has_gmap() const;
  void clear_gmap();
  const ::grps::protos::v1::GenericMapData& gmap() const;
  ::grps::protos::v1::GenericMapData* release_gmap();
  ::grps::protos::v1::GenericMapData* mutable_gmap();
  void set_allocated_gmap(::grps::protos::v1::GenericMapData* gmap);
  void unsafe_arena_set_allocated_gmap(
      ::grps::protos::v1::GenericMapData* gmap);
  ::grps::protos::v1::GenericMapData* unsafe_arena_release_gmap();

  void clear_data_oneof();
  DataOneofCase data_oneof_case() const;
  // @@protoc_insertion_point(class_scope:grps.protos.v1.GrpsMessage)
 private:
  class _Internal;
  void set_has_bin_data();
  void set_has_str_data();
  void set_has_gtensors();
  void set_has_ndarray();
  void set_has_gmap();

  inline bool has_data_oneof() const;
  inline void clear_has_data_oneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::grps::protos::v1::Status* status_;
  union DataOneofUnion {
    DataOneofUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bin_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_data_;
    ::grps::protos::v1::GenericTensorData* gtensors_;
    ::grps::protos::v1::NDArrayData* ndarray_;
    ::grps::protos::v1::GenericMapData* gmap_;
  } data_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_grps_2eproto;
};
// -------------------------------------------------------------------

class Status :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grps.protos.v1.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grps.protos.v1.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Status_StatusFlag StatusFlag;
  static constexpr StatusFlag UNKNOWN =
    Status_StatusFlag_UNKNOWN;
  static constexpr StatusFlag SUCCESS =
    Status_StatusFlag_SUCCESS;
  static constexpr StatusFlag FAILURE =
    Status_StatusFlag_FAILURE;
  static inline bool StatusFlag_IsValid(int value) {
    return Status_StatusFlag_IsValid(value);
  }
  static constexpr StatusFlag StatusFlag_MIN =
    Status_StatusFlag_StatusFlag_MIN;
  static constexpr StatusFlag StatusFlag_MAX =
    Status_StatusFlag_StatusFlag_MAX;
  static constexpr int StatusFlag_ARRAYSIZE =
    Status_StatusFlag_StatusFlag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusFlag_descriptor() {
    return Status_StatusFlag_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusFlag_Name.");
    return Status_StatusFlag_Name(enum_t_value);
  }
  static inline bool StatusFlag_Parse(const std::string& name,
      StatusFlag* value) {
    return Status_StatusFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .grps.protos.v1.Status.StatusFlag status = 3;
  void clear_status();
  ::grps::protos::v1::Status_StatusFlag status() const;
  void set_status(::grps::protos::v1::Status_StatusFlag value);

  // @@protoc_insertion_point(class_scope:grps.protos.v1.Status)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grps_2eproto;
};
// -------------------------------------------------------------------

class EmptyGrpsMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grps.protos.v1.EmptyGrpsMessage) */ {
 public:
  EmptyGrpsMessage();
  virtual ~EmptyGrpsMessage();

  EmptyGrpsMessage(const EmptyGrpsMessage& from);
  EmptyGrpsMessage(EmptyGrpsMessage&& from) noexcept
    : EmptyGrpsMessage() {
    *this = ::std::move(from);
  }

  inline EmptyGrpsMessage& operator=(const EmptyGrpsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyGrpsMessage& operator=(EmptyGrpsMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyGrpsMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyGrpsMessage* internal_default_instance() {
    return reinterpret_cast<const EmptyGrpsMessage*>(
               &_EmptyGrpsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EmptyGrpsMessage& a, EmptyGrpsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyGrpsMessage* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyGrpsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyGrpsMessage* New() const final {
    return CreateMaybeMessage<EmptyGrpsMessage>(nullptr);
  }

  EmptyGrpsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyGrpsMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyGrpsMessage& from);
  void MergeFrom(const EmptyGrpsMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyGrpsMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grps.protos.v1.EmptyGrpsMessage";
  }
  protected:
  explicit EmptyGrpsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grps_2eproto);
    return ::descriptor_table_grps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:grps.protos.v1.EmptyGrpsMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenericTensor

// string name = 1;
inline void GenericTensor::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& GenericTensor::name() const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.name)
  return name_.Get();
}
inline void GenericTensor::set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.name)
}
inline void GenericTensor::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:grps.protos.v1.GenericTensor.name)
}
inline void GenericTensor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:grps.protos.v1.GenericTensor.name)
}
inline void GenericTensor::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:grps.protos.v1.GenericTensor.name)
}
inline std::string* GenericTensor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:grps.protos.v1.GenericTensor.name)
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* GenericTensor::release_name() {
  // @@protoc_insertion_point(field_release:grps.protos.v1.GenericTensor.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GenericTensor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:grps.protos.v1.GenericTensor.name)
}
inline std::string* GenericTensor::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grps.protos.v1.GenericTensor.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GenericTensor::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grps.protos.v1.GenericTensor.name)
}

// .grps.protos.v1.DataType dtype = 2;
inline void GenericTensor::clear_dtype() {
  dtype_ = 0;
}
inline ::grps::protos::v1::DataType GenericTensor::dtype() const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.dtype)
  return static_cast< ::grps::protos::v1::DataType >(dtype_);
}
inline void GenericTensor::set_dtype(::grps::protos::v1::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.dtype)
}

// repeated uint32 shape = 3 [packed = true];
inline int GenericTensor::shape_size() const {
  return shape_.size();
}
inline void GenericTensor::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GenericTensor::shape(int index) const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.shape)
  return shape_.Get(index);
}
inline void GenericTensor::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.shape)
}
inline void GenericTensor::add_shape(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensor.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GenericTensor::shape() const {
  // @@protoc_insertion_point(field_list:grps.protos.v1.GenericTensor.shape)
  return shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GenericTensor::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:grps.protos.v1.GenericTensor.shape)
  return &shape_;
}

// repeated uint32 flat_uint8 = 4 [packed = true];
inline int GenericTensor::flat_uint8_size() const {
  return flat_uint8_.size();
}
inline void GenericTensor::clear_flat_uint8() {
  flat_uint8_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GenericTensor::flat_uint8(int index) const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.flat_uint8)
  return flat_uint8_.Get(index);
}
inline void GenericTensor::set_flat_uint8(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  flat_uint8_.Set(index, value);
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.flat_uint8)
}
inline void GenericTensor::add_flat_uint8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  flat_uint8_.Add(value);
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensor.flat_uint8)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GenericTensor::flat_uint8() const {
  // @@protoc_insertion_point(field_list:grps.protos.v1.GenericTensor.flat_uint8)
  return flat_uint8_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GenericTensor::mutable_flat_uint8() {
  // @@protoc_insertion_point(field_mutable_list:grps.protos.v1.GenericTensor.flat_uint8)
  return &flat_uint8_;
}

// repeated int32 flat_int8 = 5 [packed = true];
inline int GenericTensor::flat_int8_size() const {
  return flat_int8_.size();
}
inline void GenericTensor::clear_flat_int8() {
  flat_int8_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericTensor::flat_int8(int index) const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.flat_int8)
  return flat_int8_.Get(index);
}
inline void GenericTensor::set_flat_int8(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  flat_int8_.Set(index, value);
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.flat_int8)
}
inline void GenericTensor::add_flat_int8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  flat_int8_.Add(value);
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensor.flat_int8)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GenericTensor::flat_int8() const {
  // @@protoc_insertion_point(field_list:grps.protos.v1.GenericTensor.flat_int8)
  return flat_int8_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GenericTensor::mutable_flat_int8() {
  // @@protoc_insertion_point(field_mutable_list:grps.protos.v1.GenericTensor.flat_int8)
  return &flat_int8_;
}

// repeated int32 flat_int16 = 6 [packed = true];
inline int GenericTensor::flat_int16_size() const {
  return flat_int16_.size();
}
inline void GenericTensor::clear_flat_int16() {
  flat_int16_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericTensor::flat_int16(int index) const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.flat_int16)
  return flat_int16_.Get(index);
}
inline void GenericTensor::set_flat_int16(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  flat_int16_.Set(index, value);
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.flat_int16)
}
inline void GenericTensor::add_flat_int16(::PROTOBUF_NAMESPACE_ID::int32 value) {
  flat_int16_.Add(value);
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensor.flat_int16)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GenericTensor::flat_int16() const {
  // @@protoc_insertion_point(field_list:grps.protos.v1.GenericTensor.flat_int16)
  return flat_int16_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GenericTensor::mutable_flat_int16() {
  // @@protoc_insertion_point(field_mutable_list:grps.protos.v1.GenericTensor.flat_int16)
  return &flat_int16_;
}

// repeated int32 flat_int32 = 7 [packed = true];
inline int GenericTensor::flat_int32_size() const {
  return flat_int32_.size();
}
inline void GenericTensor::clear_flat_int32() {
  flat_int32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericTensor::flat_int32(int index) const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.flat_int32)
  return flat_int32_.Get(index);
}
inline void GenericTensor::set_flat_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  flat_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.flat_int32)
}
inline void GenericTensor::add_flat_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  flat_int32_.Add(value);
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensor.flat_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GenericTensor::flat_int32() const {
  // @@protoc_insertion_point(field_list:grps.protos.v1.GenericTensor.flat_int32)
  return flat_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GenericTensor::mutable_flat_int32() {
  // @@protoc_insertion_point(field_mutable_list:grps.protos.v1.GenericTensor.flat_int32)
  return &flat_int32_;
}

// repeated int64 flat_int64 = 8 [packed = true];
inline int GenericTensor::flat_int64_size() const {
  return flat_int64_.size();
}
inline void GenericTensor::clear_flat_int64() {
  flat_int64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenericTensor::flat_int64(int index) const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.flat_int64)
  return flat_int64_.Get(index);
}
inline void GenericTensor::set_flat_int64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  flat_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.flat_int64)
}
inline void GenericTensor::add_flat_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  flat_int64_.Add(value);
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensor.flat_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GenericTensor::flat_int64() const {
  // @@protoc_insertion_point(field_list:grps.protos.v1.GenericTensor.flat_int64)
  return flat_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GenericTensor::mutable_flat_int64() {
  // @@protoc_insertion_point(field_mutable_list:grps.protos.v1.GenericTensor.flat_int64)
  return &flat_int64_;
}

// repeated float flat_float16 = 9 [packed = true];
inline int GenericTensor::flat_float16_size() const {
  return flat_float16_.size();
}
inline void GenericTensor::clear_flat_float16() {
  flat_float16_.Clear();
}
inline float GenericTensor::flat_float16(int index) const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.flat_float16)
  return flat_float16_.Get(index);
}
inline void GenericTensor::set_flat_float16(int index, float value) {
  flat_float16_.Set(index, value);
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.flat_float16)
}
inline void GenericTensor::add_flat_float16(float value) {
  flat_float16_.Add(value);
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensor.flat_float16)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GenericTensor::flat_float16() const {
  // @@protoc_insertion_point(field_list:grps.protos.v1.GenericTensor.flat_float16)
  return flat_float16_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GenericTensor::mutable_flat_float16() {
  // @@protoc_insertion_point(field_mutable_list:grps.protos.v1.GenericTensor.flat_float16)
  return &flat_float16_;
}

// repeated float flat_float32 = 10 [packed = true];
inline int GenericTensor::flat_float32_size() const {
  return flat_float32_.size();
}
inline void GenericTensor::clear_flat_float32() {
  flat_float32_.Clear();
}
inline float GenericTensor::flat_float32(int index) const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.flat_float32)
  return flat_float32_.Get(index);
}
inline void GenericTensor::set_flat_float32(int index, float value) {
  flat_float32_.Set(index, value);
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.flat_float32)
}
inline void GenericTensor::add_flat_float32(float value) {
  flat_float32_.Add(value);
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensor.flat_float32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GenericTensor::flat_float32() const {
  // @@protoc_insertion_point(field_list:grps.protos.v1.GenericTensor.flat_float32)
  return flat_float32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GenericTensor::mutable_flat_float32() {
  // @@protoc_insertion_point(field_mutable_list:grps.protos.v1.GenericTensor.flat_float32)
  return &flat_float32_;
}

// repeated double flat_float64 = 11 [packed = true];
inline int GenericTensor::flat_float64_size() const {
  return flat_float64_.size();
}
inline void GenericTensor::clear_flat_float64() {
  flat_float64_.Clear();
}
inline double GenericTensor::flat_float64(int index) const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.flat_float64)
  return flat_float64_.Get(index);
}
inline void GenericTensor::set_flat_float64(int index, double value) {
  flat_float64_.Set(index, value);
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.flat_float64)
}
inline void GenericTensor::add_flat_float64(double value) {
  flat_float64_.Add(value);
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensor.flat_float64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GenericTensor::flat_float64() const {
  // @@protoc_insertion_point(field_list:grps.protos.v1.GenericTensor.flat_float64)
  return flat_float64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GenericTensor::mutable_flat_float64() {
  // @@protoc_insertion_point(field_mutable_list:grps.protos.v1.GenericTensor.flat_float64)
  return &flat_float64_;
}

// repeated string flat_string = 12;
inline int GenericTensor::flat_string_size() const {
  return flat_string_.size();
}
inline void GenericTensor::clear_flat_string() {
  flat_string_.Clear();
}
inline const std::string& GenericTensor::flat_string(int index) const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensor.flat_string)
  return flat_string_.Get(index);
}
inline std::string* GenericTensor::mutable_flat_string(int index) {
  // @@protoc_insertion_point(field_mutable:grps.protos.v1.GenericTensor.flat_string)
  return flat_string_.Mutable(index);
}
inline void GenericTensor::set_flat_string(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.flat_string)
  flat_string_.Mutable(index)->assign(value);
}
inline void GenericTensor::set_flat_string(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:grps.protos.v1.GenericTensor.flat_string)
  flat_string_.Mutable(index)->assign(std::move(value));
}
inline void GenericTensor::set_flat_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  flat_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:grps.protos.v1.GenericTensor.flat_string)
}
inline void GenericTensor::set_flat_string(int index, const char* value, size_t size) {
  flat_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:grps.protos.v1.GenericTensor.flat_string)
}
inline std::string* GenericTensor::add_flat_string() {
  // @@protoc_insertion_point(field_add_mutable:grps.protos.v1.GenericTensor.flat_string)
  return flat_string_.Add();
}
inline void GenericTensor::add_flat_string(const std::string& value) {
  flat_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensor.flat_string)
}
inline void GenericTensor::add_flat_string(std::string&& value) {
  flat_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensor.flat_string)
}
inline void GenericTensor::add_flat_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  flat_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:grps.protos.v1.GenericTensor.flat_string)
}
inline void GenericTensor::add_flat_string(const char* value, size_t size) {
  flat_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:grps.protos.v1.GenericTensor.flat_string)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenericTensor::flat_string() const {
  // @@protoc_insertion_point(field_list:grps.protos.v1.GenericTensor.flat_string)
  return flat_string_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenericTensor::mutable_flat_string() {
  // @@protoc_insertion_point(field_mutable_list:grps.protos.v1.GenericTensor.flat_string)
  return &flat_string_;
}

// -------------------------------------------------------------------

// GenericTensorData

// repeated .grps.protos.v1.GenericTensor tensors = 1;
inline int GenericTensorData::tensors_size() const {
  return tensors_.size();
}
inline void GenericTensorData::clear_tensors() {
  tensors_.Clear();
}
inline ::grps::protos::v1::GenericTensor* GenericTensorData::mutable_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:grps.protos.v1.GenericTensorData.tensors)
  return tensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grps::protos::v1::GenericTensor >*
GenericTensorData::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:grps.protos.v1.GenericTensorData.tensors)
  return &tensors_;
}
inline const ::grps::protos::v1::GenericTensor& GenericTensorData::tensors(int index) const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GenericTensorData.tensors)
  return tensors_.Get(index);
}
inline ::grps::protos::v1::GenericTensor* GenericTensorData::add_tensors() {
  // @@protoc_insertion_point(field_add:grps.protos.v1.GenericTensorData.tensors)
  return tensors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::grps::protos::v1::GenericTensor >&
GenericTensorData::tensors() const {
  // @@protoc_insertion_point(field_list:grps.protos.v1.GenericTensorData.tensors)
  return tensors_;
}

// -------------------------------------------------------------------

// NDArrayData

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GenericMapData

// map<string, string> s_s = 1;
inline int GenericMapData::s_s_size() const {
  return s_s_.size();
}
inline void GenericMapData::clear_s_s() {
  s_s_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GenericMapData::s_s() const {
  // @@protoc_insertion_point(field_map:grps.protos.v1.GenericMapData.s_s)
  return s_s_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GenericMapData::mutable_s_s() {
  // @@protoc_insertion_point(field_mutable_map:grps.protos.v1.GenericMapData.s_s)
  return s_s_.MutableMap();
}

// map<string, bytes> s_b = 2;
inline int GenericMapData::s_b_size() const {
  return s_b_.size();
}
inline void GenericMapData::clear_s_b() {
  s_b_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GenericMapData::s_b() const {
  // @@protoc_insertion_point(field_map:grps.protos.v1.GenericMapData.s_b)
  return s_b_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GenericMapData::mutable_s_b() {
  // @@protoc_insertion_point(field_mutable_map:grps.protos.v1.GenericMapData.s_b)
  return s_b_.MutableMap();
}

// map<string, int32> s_i32 = 3;
inline int GenericMapData::s_i32_size() const {
  return s_i32_.size();
}
inline void GenericMapData::clear_s_i32() {
  s_i32_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
GenericMapData::s_i32() const {
  // @@protoc_insertion_point(field_map:grps.protos.v1.GenericMapData.s_i32)
  return s_i32_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
GenericMapData::mutable_s_i32() {
  // @@protoc_insertion_point(field_mutable_map:grps.protos.v1.GenericMapData.s_i32)
  return s_i32_.MutableMap();
}

// map<string, int64> s_i64 = 4;
inline int GenericMapData::s_i64_size() const {
  return s_i64_.size();
}
inline void GenericMapData::clear_s_i64() {
  s_i64_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
GenericMapData::s_i64() const {
  // @@protoc_insertion_point(field_map:grps.protos.v1.GenericMapData.s_i64)
  return s_i64_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
GenericMapData::mutable_s_i64() {
  // @@protoc_insertion_point(field_mutable_map:grps.protos.v1.GenericMapData.s_i64)
  return s_i64_.MutableMap();
}

// map<string, float> s_f = 5;
inline int GenericMapData::s_f_size() const {
  return s_f_.size();
}
inline void GenericMapData::clear_s_f() {
  s_f_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
GenericMapData::s_f() const {
  // @@protoc_insertion_point(field_map:grps.protos.v1.GenericMapData.s_f)
  return s_f_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
GenericMapData::mutable_s_f() {
  // @@protoc_insertion_point(field_mutable_map:grps.protos.v1.GenericMapData.s_f)
  return s_f_.MutableMap();
}

// map<string, double> s_d = 6;
inline int GenericMapData::s_d_size() const {
  return s_d_.size();
}
inline void GenericMapData::clear_s_d() {
  s_d_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
GenericMapData::s_d() const {
  // @@protoc_insertion_point(field_map:grps.protos.v1.GenericMapData.s_d)
  return s_d_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
GenericMapData::mutable_s_d() {
  // @@protoc_insertion_point(field_mutable_map:grps.protos.v1.GenericMapData.s_d)
  return s_d_.MutableMap();
}

// -------------------------------------------------------------------

// GrpsMessage

// .grps.protos.v1.Status status = 1;
inline bool GrpsMessage::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline void GrpsMessage::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::grps::protos::v1::Status& GrpsMessage::status() const {
  const ::grps::protos::v1::Status* p = status_;
  // @@protoc_insertion_point(field_get:grps.protos.v1.GrpsMessage.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::grps::protos::v1::Status*>(
      &::grps::protos::v1::_Status_default_instance_);
}
inline ::grps::protos::v1::Status* GrpsMessage::release_status() {
  // @@protoc_insertion_point(field_release:grps.protos.v1.GrpsMessage.status)
  
  ::grps::protos::v1::Status* temp = status_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  status_ = nullptr;
  return temp;
}
inline ::grps::protos::v1::Status* GrpsMessage::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grps.protos.v1.GrpsMessage.status)
  
  ::grps::protos::v1::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::grps::protos::v1::Status* GrpsMessage::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::grps::protos::v1::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:grps.protos.v1.GrpsMessage.status)
  return status_;
}
inline void GrpsMessage::set_allocated_status(::grps::protos::v1::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:grps.protos.v1.GrpsMessage.status)
}

// string model = 2;
inline void GrpsMessage::clear_model() {
  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& GrpsMessage::model() const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GrpsMessage.model)
  return model_.Get();
}
inline void GrpsMessage::set_model(const std::string& value) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:grps.protos.v1.GrpsMessage.model)
}
inline void GrpsMessage::set_model(std::string&& value) {
  
  model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:grps.protos.v1.GrpsMessage.model)
}
inline void GrpsMessage::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:grps.protos.v1.GrpsMessage.model)
}
inline void GrpsMessage::set_model(const char* value,
    size_t size) {
  
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:grps.protos.v1.GrpsMessage.model)
}
inline std::string* GrpsMessage::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:grps.protos.v1.GrpsMessage.model)
  return model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* GrpsMessage::release_model() {
  // @@protoc_insertion_point(field_release:grps.protos.v1.GrpsMessage.model)
  
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GrpsMessage::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:grps.protos.v1.GrpsMessage.model)
}
inline std::string* GrpsMessage::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grps.protos.v1.GrpsMessage.model)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return model_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GrpsMessage::unsafe_arena_set_allocated_model(
    std::string* model) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (model != nullptr) {
    
  } else {
    
  }
  model_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      model, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grps.protos.v1.GrpsMessage.model)
}

// bytes bin_data = 3;
inline bool GrpsMessage::has_bin_data() const {
  return data_oneof_case() == kBinData;
}
inline void GrpsMessage::set_has_bin_data() {
  _oneof_case_[0] = kBinData;
}
inline void GrpsMessage::clear_bin_data() {
  if (has_bin_data()) {
    data_oneof_.bin_data_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_data_oneof();
  }
}
inline const std::string& GrpsMessage::bin_data() const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GrpsMessage.bin_data)
  if (has_bin_data()) {
    return data_oneof_.bin_data_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GrpsMessage::set_bin_data(const std::string& value) {
  if (!has_bin_data()) {
    clear_data_oneof();
    set_has_bin_data();
    data_oneof_.bin_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bin_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:grps.protos.v1.GrpsMessage.bin_data)
}
inline void GrpsMessage::set_bin_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:grps.protos.v1.GrpsMessage.bin_data)
  if (!has_bin_data()) {
    clear_data_oneof();
    set_has_bin_data();
    data_oneof_.bin_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bin_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:grps.protos.v1.GrpsMessage.bin_data)
}
inline void GrpsMessage::set_bin_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_bin_data()) {
    clear_data_oneof();
    set_has_bin_data();
    data_oneof_.bin_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bin_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:grps.protos.v1.GrpsMessage.bin_data)
}
inline void GrpsMessage::set_bin_data(const void* value,
                             size_t size) {
  if (!has_bin_data()) {
    clear_data_oneof();
    set_has_bin_data();
    data_oneof_.bin_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bin_data_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:grps.protos.v1.GrpsMessage.bin_data)
}
inline std::string* GrpsMessage::mutable_bin_data() {
  if (!has_bin_data()) {
    clear_data_oneof();
    set_has_bin_data();
    data_oneof_.bin_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_oneof_.bin_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:grps.protos.v1.GrpsMessage.bin_data)
}
inline std::string* GrpsMessage::release_bin_data() {
  // @@protoc_insertion_point(field_release:grps.protos.v1.GrpsMessage.bin_data)
  if (has_bin_data()) {
    clear_has_data_oneof();
    return data_oneof_.bin_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void GrpsMessage::set_allocated_bin_data(std::string* bin_data) {
  if (has_data_oneof()) {
    clear_data_oneof();
  }
  if (bin_data != nullptr) {
    set_has_bin_data();
    data_oneof_.bin_data_.UnsafeSetDefault(bin_data);
  }
  // @@protoc_insertion_point(field_set_allocated:grps.protos.v1.GrpsMessage.bin_data)
}
inline std::string* GrpsMessage::unsafe_arena_release_bin_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grps.protos.v1.GrpsMessage.bin_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (has_bin_data()) {
    clear_has_data_oneof();
    return data_oneof_.bin_data_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void GrpsMessage::unsafe_arena_set_allocated_bin_data(std::string* bin_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!has_bin_data()) {
    data_oneof_.bin_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_oneof();
  if (bin_data) {
    set_has_bin_data();
    data_oneof_.bin_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bin_data, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grps.protos.v1.GrpsMessage.bin_data)
}

// string str_data = 4;
inline bool GrpsMessage::has_str_data() const {
  return data_oneof_case() == kStrData;
}
inline void GrpsMessage::set_has_str_data() {
  _oneof_case_[0] = kStrData;
}
inline void GrpsMessage::clear_str_data() {
  if (has_str_data()) {
    data_oneof_.str_data_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_data_oneof();
  }
}
inline const std::string& GrpsMessage::str_data() const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GrpsMessage.str_data)
  if (has_str_data()) {
    return data_oneof_.str_data_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GrpsMessage::set_str_data(const std::string& value) {
  if (!has_str_data()) {
    clear_data_oneof();
    set_has_str_data();
    data_oneof_.str_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.str_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:grps.protos.v1.GrpsMessage.str_data)
}
inline void GrpsMessage::set_str_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:grps.protos.v1.GrpsMessage.str_data)
  if (!has_str_data()) {
    clear_data_oneof();
    set_has_str_data();
    data_oneof_.str_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.str_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:grps.protos.v1.GrpsMessage.str_data)
}
inline void GrpsMessage::set_str_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_str_data()) {
    clear_data_oneof();
    set_has_str_data();
    data_oneof_.str_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.str_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:grps.protos.v1.GrpsMessage.str_data)
}
inline void GrpsMessage::set_str_data(const char* value,
                             size_t size) {
  if (!has_str_data()) {
    clear_data_oneof();
    set_has_str_data();
    data_oneof_.str_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.str_data_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:grps.protos.v1.GrpsMessage.str_data)
}
inline std::string* GrpsMessage::mutable_str_data() {
  if (!has_str_data()) {
    clear_data_oneof();
    set_has_str_data();
    data_oneof_.str_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_oneof_.str_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:grps.protos.v1.GrpsMessage.str_data)
}
inline std::string* GrpsMessage::release_str_data() {
  // @@protoc_insertion_point(field_release:grps.protos.v1.GrpsMessage.str_data)
  if (has_str_data()) {
    clear_has_data_oneof();
    return data_oneof_.str_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void GrpsMessage::set_allocated_str_data(std::string* str_data) {
  if (has_data_oneof()) {
    clear_data_oneof();
  }
  if (str_data != nullptr) {
    set_has_str_data();
    data_oneof_.str_data_.UnsafeSetDefault(str_data);
  }
  // @@protoc_insertion_point(field_set_allocated:grps.protos.v1.GrpsMessage.str_data)
}
inline std::string* GrpsMessage::unsafe_arena_release_str_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grps.protos.v1.GrpsMessage.str_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (has_str_data()) {
    clear_has_data_oneof();
    return data_oneof_.str_data_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void GrpsMessage::unsafe_arena_set_allocated_str_data(std::string* str_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!has_str_data()) {
    data_oneof_.str_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_oneof();
  if (str_data) {
    set_has_str_data();
    data_oneof_.str_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_data, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grps.protos.v1.GrpsMessage.str_data)
}

// .grps.protos.v1.GenericTensorData gtensors = 5;
inline bool GrpsMessage::has_gtensors() const {
  return data_oneof_case() == kGtensors;
}
inline void GrpsMessage::set_has_gtensors() {
  _oneof_case_[0] = kGtensors;
}
inline void GrpsMessage::clear_gtensors() {
  if (has_gtensors()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete data_oneof_.gtensors_;
    }
    clear_has_data_oneof();
  }
}
inline ::grps::protos::v1::GenericTensorData* GrpsMessage::release_gtensors() {
  // @@protoc_insertion_point(field_release:grps.protos.v1.GrpsMessage.gtensors)
  if (has_gtensors()) {
    clear_has_data_oneof();
      ::grps::protos::v1::GenericTensorData* temp = data_oneof_.gtensors_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_oneof_.gtensors_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grps::protos::v1::GenericTensorData& GrpsMessage::gtensors() const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GrpsMessage.gtensors)
  return has_gtensors()
      ? *data_oneof_.gtensors_
      : *reinterpret_cast< ::grps::protos::v1::GenericTensorData*>(&::grps::protos::v1::_GenericTensorData_default_instance_);
}
inline ::grps::protos::v1::GenericTensorData* GrpsMessage::unsafe_arena_release_gtensors() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grps.protos.v1.GrpsMessage.gtensors)
  if (has_gtensors()) {
    clear_has_data_oneof();
    ::grps::protos::v1::GenericTensorData* temp = data_oneof_.gtensors_;
    data_oneof_.gtensors_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GrpsMessage::unsafe_arena_set_allocated_gtensors(::grps::protos::v1::GenericTensorData* gtensors) {
  clear_data_oneof();
  if (gtensors) {
    set_has_gtensors();
    data_oneof_.gtensors_ = gtensors;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grps.protos.v1.GrpsMessage.gtensors)
}
inline ::grps::protos::v1::GenericTensorData* GrpsMessage::mutable_gtensors() {
  if (!has_gtensors()) {
    clear_data_oneof();
    set_has_gtensors();
    data_oneof_.gtensors_ = CreateMaybeMessage< ::grps::protos::v1::GenericTensorData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grps.protos.v1.GrpsMessage.gtensors)
  return data_oneof_.gtensors_;
}

// .grps.protos.v1.NDArrayData ndarray = 6;
inline bool GrpsMessage::has_ndarray() const {
  return data_oneof_case() == kNdarray;
}
inline void GrpsMessage::set_has_ndarray() {
  _oneof_case_[0] = kNdarray;
}
inline void GrpsMessage::clear_ndarray() {
  if (has_ndarray()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete data_oneof_.ndarray_;
    }
    clear_has_data_oneof();
  }
}
inline ::grps::protos::v1::NDArrayData* GrpsMessage::release_ndarray() {
  // @@protoc_insertion_point(field_release:grps.protos.v1.GrpsMessage.ndarray)
  if (has_ndarray()) {
    clear_has_data_oneof();
      ::grps::protos::v1::NDArrayData* temp = data_oneof_.ndarray_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_oneof_.ndarray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grps::protos::v1::NDArrayData& GrpsMessage::ndarray() const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GrpsMessage.ndarray)
  return has_ndarray()
      ? *data_oneof_.ndarray_
      : *reinterpret_cast< ::grps::protos::v1::NDArrayData*>(&::grps::protos::v1::_NDArrayData_default_instance_);
}
inline ::grps::protos::v1::NDArrayData* GrpsMessage::unsafe_arena_release_ndarray() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grps.protos.v1.GrpsMessage.ndarray)
  if (has_ndarray()) {
    clear_has_data_oneof();
    ::grps::protos::v1::NDArrayData* temp = data_oneof_.ndarray_;
    data_oneof_.ndarray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GrpsMessage::unsafe_arena_set_allocated_ndarray(::grps::protos::v1::NDArrayData* ndarray) {
  clear_data_oneof();
  if (ndarray) {
    set_has_ndarray();
    data_oneof_.ndarray_ = ndarray;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grps.protos.v1.GrpsMessage.ndarray)
}
inline ::grps::protos::v1::NDArrayData* GrpsMessage::mutable_ndarray() {
  if (!has_ndarray()) {
    clear_data_oneof();
    set_has_ndarray();
    data_oneof_.ndarray_ = CreateMaybeMessage< ::grps::protos::v1::NDArrayData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grps.protos.v1.GrpsMessage.ndarray)
  return data_oneof_.ndarray_;
}

// .grps.protos.v1.GenericMapData gmap = 7;
inline bool GrpsMessage::has_gmap() const {
  return data_oneof_case() == kGmap;
}
inline void GrpsMessage::set_has_gmap() {
  _oneof_case_[0] = kGmap;
}
inline void GrpsMessage::clear_gmap() {
  if (has_gmap()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete data_oneof_.gmap_;
    }
    clear_has_data_oneof();
  }
}
inline ::grps::protos::v1::GenericMapData* GrpsMessage::release_gmap() {
  // @@protoc_insertion_point(field_release:grps.protos.v1.GrpsMessage.gmap)
  if (has_gmap()) {
    clear_has_data_oneof();
      ::grps::protos::v1::GenericMapData* temp = data_oneof_.gmap_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_oneof_.gmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grps::protos::v1::GenericMapData& GrpsMessage::gmap() const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.GrpsMessage.gmap)
  return has_gmap()
      ? *data_oneof_.gmap_
      : *reinterpret_cast< ::grps::protos::v1::GenericMapData*>(&::grps::protos::v1::_GenericMapData_default_instance_);
}
inline ::grps::protos::v1::GenericMapData* GrpsMessage::unsafe_arena_release_gmap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grps.protos.v1.GrpsMessage.gmap)
  if (has_gmap()) {
    clear_has_data_oneof();
    ::grps::protos::v1::GenericMapData* temp = data_oneof_.gmap_;
    data_oneof_.gmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GrpsMessage::unsafe_arena_set_allocated_gmap(::grps::protos::v1::GenericMapData* gmap) {
  clear_data_oneof();
  if (gmap) {
    set_has_gmap();
    data_oneof_.gmap_ = gmap;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grps.protos.v1.GrpsMessage.gmap)
}
inline ::grps::protos::v1::GenericMapData* GrpsMessage::mutable_gmap() {
  if (!has_gmap()) {
    clear_data_oneof();
    set_has_gmap();
    data_oneof_.gmap_ = CreateMaybeMessage< ::grps::protos::v1::GenericMapData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:grps.protos.v1.GrpsMessage.gmap)
  return data_oneof_.gmap_;
}

inline bool GrpsMessage::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
inline void GrpsMessage::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
inline GrpsMessage::DataOneofCase GrpsMessage::data_oneof_case() const {
  return GrpsMessage::DataOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Status

// int32 code = 1;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.Status.code)
  return code_;
}
inline void Status::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:grps.protos.v1.Status.code)
}

// string msg = 2;
inline void Status::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Status::msg() const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.Status.msg)
  return msg_.Get();
}
inline void Status::set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:grps.protos.v1.Status.msg)
}
inline void Status::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:grps.protos.v1.Status.msg)
}
inline void Status::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:grps.protos.v1.Status.msg)
}
inline void Status::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:grps.protos.v1.Status.msg)
}
inline std::string* Status::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:grps.protos.v1.Status.msg)
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Status::release_msg() {
  // @@protoc_insertion_point(field_release:grps.protos.v1.Status.msg)
  
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Status::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:grps.protos.v1.Status.msg)
}
inline std::string* Status::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:grps.protos.v1.Status.msg)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Status::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grps.protos.v1.Status.msg)
}

// .grps.protos.v1.Status.StatusFlag status = 3;
inline void Status::clear_status() {
  status_ = 0;
}
inline ::grps::protos::v1::Status_StatusFlag Status::status() const {
  // @@protoc_insertion_point(field_get:grps.protos.v1.Status.status)
  return static_cast< ::grps::protos::v1::Status_StatusFlag >(status_);
}
inline void Status::set_status(::grps::protos::v1::Status_StatusFlag value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:grps.protos.v1.Status.status)
}

// -------------------------------------------------------------------

// EmptyGrpsMessage

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace protos
}  // namespace grps

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::grps::protos::v1::Status_StatusFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grps::protos::v1::Status_StatusFlag>() {
  return ::grps::protos::v1::Status_StatusFlag_descriptor();
}
template <> struct is_proto_enum< ::grps::protos::v1::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grps::protos::v1::DataType>() {
  return ::grps::protos::v1::DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grps_2eproto
